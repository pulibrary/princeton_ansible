---
# nginxplus repo keys
nginx_signing_key: "https://cs.nginx.com/static/keys/nginx_signing.key"
nginx_app_protect_signing_key: "https://cs.nginx.com/static/keys/app-protect-security-updates.key"
# variables for building nginxplus on our load balancers
deploy_user_uid: 1003
slack_alerts_channel:
  - '#infrastructure'
  - '#ansible-alerts'
nginx_type: plus
nginx_delete_license: false
# enable rest API
nginx_rest_api_enable: true
nginx_rest_api_write: true
nginx_rest_api_src: api.conf.j2
nginx_rest_api_location: /etc/nginx/conf.d/api.conf
nginx_rest_api_port: 8080
nginx_rest_api_dashboard: true
# upload main config file to endpoint
nginx_loadbalancer_main_upload_src: "etc_confd_default.conf.j2"
nginx_main_upload_src: "etc_nginx.conf.j2"
nginx_main_upload_dest: "/etc/nginx/nginx.conf"
nginx_main_upload_enable: true
# the hash table stores server names for fast lookup
# see PR 3578 on princeton_ansible
# increase the size first
# when that stops working, increase the hash buckets
nginx_server_names_hash_bucket_size: 64
nginx_server_names_hash_max_size: 1024
# Upload HTTP NGINX static configuration files.
nginx_http_upload_enable: true
nginx_http_upload_src: conf/http/*.conf
nginx_http_upload_dest: /etc/nginx/conf.d/
# By default we leave all existing config untouched.
# Set nginx_cleanup_config=true to remove
# existing NGINX config files before uploading
# nginx_cleanup_config: true
# Pass the directory to clear as nginx_cleanup_config_path
nginx_cleanup_config_path: "{{ nginx_http_upload_dest }}"
# Upload SSL certificates and keys.
nginx_ssl_upload_enable: true
nginx_ssl_crt_upload_src: ssl/*.pem
nginx_ssl_crt_upload_dest: /etc/nginx/conf.d/ssl/certs/
nginx_ssl_key_upload_src: ssl/*.key
nginx_ssl_key_upload_dest: /etc/nginx/conf.d/ssl/private/
# add "template" files (partial configs)
nginx_template_upload_enable: true
nginx_template_upload_src: conf/http/templates/*.conf
nginx_template_upload_dest: /etc/nginx/conf.d/templates/
# logrotation
logrotate_rules:
  - name: "app_protect.conf"
    paths:
      - "{{ app_protect_dir }}"
    options:
      rotate: "14"
      maxsize: "{{ logrotate_global_defaults.maxsize }}"
      create_mode: "{{ logrotate_global_defaults.create_mode }}"
      create_owner: "nginx"
      create_group: "nginx"
      su_user: "{{ logrotate_global_defaults.su_user }}"
      su_group: "{{ logrotate_global_defaults.su_group }}"
      postrotate: |
        /bin/systemctl restart nginx-app-protect.service > /dev/null 2>/dev/null || true
  - name: "nginx"
    paths:
      - "/var/log/nginx/*.log"
    options:
      rotate: "14"
      maxsize: "{{ logrotate_global_defaults.maxsize }}"
      create_mode: "{{ logrotate_global_defaults.create_mode }}"
      create_owner: "nginx"
      create_group: "adm"
      su_user: "{{ logrotate_global_defaults.su_user }}"
      su_group: "{{ logrotate_global_defaults.su_group }}"
      postrotate: |
        if [ -f /var/run/nginx.pid ]; then
                kill -USR1 `cat /var/run/nginx.pid`
        fi

# configure datadog log collection
datadog_api_key: "{{ vault_datadog_key }}"
datadog_config:
  tags: "{{ nginxplus_tags }}"
  apm_enabled: "false"
  log_enabled: true
  enable_payloads:
    series: false
    events: false
    service_checks: false
    sketches: false
  process_config:
    enabled: "false"
nginxplus_tags: "application:nginxplus, environment:production, type:adc"
datadog_checks:
  process:
    logs:
      - type: file
        path: /var/log/nginx/access.log
        service: adc
        source: adc
        sourcecategory: http_web_access
        log_processing_rules:
          - type: exclude_at_match
            name: drop_nginx_warn_messages
            pattern: "\\[warn\\]"
          # Most 302s are from blocking bots and forwarding them to a turnstile.
          # We'd like to be able to see these (and other redirects), but it's too expensive to store
          # all of those, so ignore all 302s to cut down 15m logs/day
          - type: exclude_at_match
            name: drop_302_logs
            pattern: '"status": "302"'
      - type: file
        path: /var/log/nginx/error.log
        service: adc
        source: adc
        sourcecategory: http_web_access
        log_processing_rules:
          - type: exclude_at_match
            name: drop_nginx_warn_messages
            pattern: "\\[warn\\]"
