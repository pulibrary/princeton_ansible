---
postgres_version: "15"
db_clusteradmin_user: "postgres"
db_clusteradmin_password: "{{ vault_postgres_admin_password }}"
postgresql_settings:
  - name: port
    value: 5432
  - name: listen_addresses
    value: "*"
postgresql_ext_install_postgis: true
postgresql_databases:
  - name: postgres
postgresql_users:
  - name: postgres
    password: "{{ vault_postgres_admin_password }}"
    db: "postgres"
    priv: "ALL"
    role_attr_flags: "SUPERUSER"
postgresql_is_local: true
postgresadmin: "postgres"
postgres_admin_password: '{{ vault_postgres_admin_password }}'
postgres_port: 5432
postgres_admin_user: "{{ postgresadmin }}"
postgresql_log_path: "/var/lib/postgresql/{{ postgres_version }}/main/pg_log/pg.json"

postgresql_logrotate_rules:
  - name: "postgresql"
    paths:
      - "{{ postgresql_log_path }}"
    options:
      rotate: "14"
      maxsize: "2000"
      create_mode: "{{ logrotate_global_defaults.create_mode }}"
      create_owner: postgres
      create_group: postgres
      su_user: "{{ logrotate_global_defaults.su_user }}"
      su_group: "{{ logrotate_global_defaults.su_group }}"

# PostgreSQL OpenTelemetry Collector Configuration
signoz_is_local: false
signoz_otel_receivers:
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu: {}
      load: {}
      memory: {}
      disk: {}
      network: {}
      filesystem: {}
  filelog/postgresql:
    include:
      - "/var/lib/postgresql/15/main/pg_log/pg.json"
    start_at: end
    operators:
      - type: add
        field: attributes.log_source
        value: "postgresql-server"
  postgresql:
    endpoint: "localhost:5432"
    transport: tcp
    username: "monitoring"
    password: "{{ vault_signoz_monitoring_user }}"
    databases:
      - postgres
    collection_interval: 300s
    metrics:
      postgresql.database.locks:
        enabled: true
      postgresql.deadlocks:
        enabled: true
      postgresql.sequential_scans:
        enabled: true

signoz_otel_processors:
  resource:
    attributes:
      - key: host.name
        value: "{{ ansible_fqdn }}"
        action: upsert
      - key: service.name
        value: "postgresql-server"
        action: upsert
      - key: service.version
        value: "staging"
        action: upsert
      - key: environment
        value: "staging"
        action: upsert
  batch:
    timeout: 30s
    send_batch_size: 512
    send_batch_max_size: 1024

signoz_otel_exporters:
  otlp:
    endpoint: "http://sandbox-signoz1.lib.princeton.edu:4317"
    tls:
      insecure: true
  debug:
    verbosity: basic

signoz_otel_service_pipelines:
  metrics:
    receivers: [hostmetrics, postgresql]
    processors: [resource, batch]
    exporters: [otlp, debug]
  logs:
    receivers: [filelog/postgresql]
    processors: [resource, batch]
    exporters: [otlp, debug]

signoz_otel_service_extensions: []
