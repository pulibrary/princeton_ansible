- name: rebuild nginx server
  hosts: nginxplus_{{ runtime_env | default('staging') }}
  remote_user: pulsys
  become: true
  vars_files:
    - ../group_vars/nginxplus/main.yml
    - ../group_vars/nginxplus/{{ runtime_env | default('staging') }}.yml
  vars_prompt:
    - name: "letsencrypt_confirmation"
      prompt: "Have you already run the Let's Encrypt playbook? (yes/no)"
      private: no

  pre_tasks:
    - name: Stop playbook if you didn't use --limit
      fail:
        msg: "You must use -l or --limit."
      when: ansible_limit is not defined
      run_once: true

    - name: Fail if Let's Encrypt playbook was not run
      fail:
        msg: "Please run the Let's Encrypt playbook before proceeding."
      when: letsencrypt_confirmation != "yes"
      run_once: true

    - name: Tell infrastructure and ansible-alerts the playbook is starting
      community.general.slack:
        token: "{{ vault_tower_slack_token }}"
        msg: "Ansible is now running `{{ ansible_play_name }}` with the `{{ ansible_run_tags }}` tag on {{ inventory_hostname }}"
        channel: "{{ item }}"
      loop: "{{ slack_alerts_channel }}"
      tags: always

# Rebuilds the load balancer from scratch
  roles:
    - role: ../roles/datadog
      when: runtime_env | default('staging') == "production"
    - role: ../roles/deploy_user
    - role: ../roles/nginxplus

- name: restart rebuilt nginx and announce success
  hosts: nginxplus_{{ runtime_env | default('staging') }}
  remote_user: pulsys
  strategy: linear
  become: true

  tasks:
    - name: nginxplus | restart nginx for realsies
      ansible.builtin.service:
        name: nginx
        state: reloaded
      tags: always

  post_tasks:
      - name: send information to slack
        ansible.builtin.include_tasks:
          file: utils/slack_tasks_end_of_playbook.yml
        tags: always

