---
# by default this playbook runs in the staging environment
# to run in qa, pass '-e runtime_env=qa'
# to run in production, pass '-e runtime_env=production'
# when running this playbook in production log into the
# standby lib-adc{1,2} and run the update manually and 
# restart it. This will prevent both production loadbalancers
# from going down at the same time
- name: update the Operating System apt packages 
  hosts: "{{ runtime_env | default('staging') }}"
  remote_user: pulsys
  serial: 2
  become: true

  pre_tasks:
    - name: test for python on new VM
      ansible.builtin.raw: test -e /usr/bin/python
      changed_when: false
      failed_when: false
      register: check_python
      when: ansible_os_family == "OpenBSD"

    - name: Install Python  # this has to be raw in the event python is not installed
      ansible.builtin.raw: "pkg_add python%3.9"
      when:
        - ansible_os_family == "OpenBSD"
        - check_python.rc != 0

  tasks:

    - name: openbsd | Upgrade to latest snapshot
      community.general.sysupgrade:
        snapshot: true
        installurl: https://cloudflare.cdn.openbsd.org/pub/OpenBSD
      register: sysupgrade
      when: ansible_os_family == "OpenBSD"

    - name: openbsd | Reboot to apply upgrade if needed
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible because of sysupgrade updates."
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 15
        test_command: whoami
      when: 
        - ansible_os_family == "OpenBSD"
        - sysupgrade.changed

    - name: openbsd | Install a base set of software packages.
      community.general.openbsd_pkg:
        name:
          - zsh
          - curl
          - git
          - htop
          - rsync--
          - vim--no_x11-lua
        state: present
      when: ansible_os_family == "OpenBSD"

    - name: openbsd | update base set of software packages.
      community.general.openbsd_pkg:
        name: '*'
        state: latest
      when: ansible_os_family == "OpenBSD"

    - name: os_updates | Upgrade all packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        force_apt_get: true
      when: ansible_os_family == "Debian"

    - name: os_updates | Check if reboot required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian"

    - name: os_updates | Reboot if required
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible because of apt-get updates."
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 15
        test_command: whoami
      when: 
        - ansible_os_family == "Debian"
        - reboot_required_file.stat.exists == true

    - name: tell everyone on slack you ran an ansible playbook
      community.general.slack:
        token: "{{ vault_pul_slack_token }}"
        msg: "Ansible ran `{{ ansible_play_name }}` on {{ inventory_hostname }}"
        channel: #server-alerts
