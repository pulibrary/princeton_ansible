---
- name: get issues from GitLab
  hosts: localhost
  vars_files:
    - ../../group_vars/gitlab/vault.yml
  tasks:
<<<<<<< HEAD
      - name: call issue API
        ansible.builtin.uri:
          url: "https://gitlab.lib.princeton.edu/api/v4/issues?scope=all&project_id=5&access_token={{ vault_gitlab_issue_access_token }}"
          method: GET
          # 'scope=all' pulls issues created by all users
        register: api_output
=======
    - name: call issue API
      ansible.builtin.uri:
        url: "https://gitlab.lib.princeton.edu/api/v4/issues?scope=all&project_id=5&access_token={{ vault_gitlab_issue_access_token }}"
        method: GET
        # 'scope=all' pulls issues created by all users
      register: api_output

    # - name: view results
    #   ansible.builtin.debug:
    #     var: api_output

<<<<<<< HEAD
#    - name: select our data
 #     ansible.what???:
        #what we want is:
          # api_output.json.[#]. and then title, iid (that's not a typo), state, assignee.name, created_at, labels, and web_url
>>>>>>> e99e4e29b (first draft of playbook to pull issues from GitLab for our Airtable board)
=======
    - name: write CSV headers
      ansible.builtin.lineinfile:
        create: true
        dest: /opt/gitlab_issues/gitlabissues.csv
        line: Source,Title,Issue ID,State,Assignee,Created At (UTC),Labels,URL
        insertbefore: BOF
        state: present

    - name: write selected output to CSV
      ansible.builtin.lineinfile:
        dest: /opt/gitlab_issues/gitlabissues.csv
        line: GitLab,"{{ item.title }}",{{ item.iid }},{{ item.state }},{{ item.assignee.name | default('') }},{{ item.created_at }},{{ item.labels | default('') }},{{ item.web_url }}
        insertafter: EOF
        state: present
      loop: "{{ api_output | community.general.json_query('json[*]') }}"
      # we assume every issue will have a title, an issue ID, a state, a created_at timestamp, and a URL
      # we allow null values for assignee and labels
<<<<<<< HEAD
>>>>>>> 19a5db503 (pulls protected content, writes to CSV)
=======

# for sending the resulting file, we might be able to use an email notification in Tower
# if that doesn't work, something like this should:
<<<<<<< HEAD
    # - name: Send e-mail with CSV attached
    #   community.general.mail:
    #     host: "{{ vault_proofpoint_host }}"
    #     port: 587
    #     subject: GitLab Issue report
    #     body: Here is the list of issues from the ops-team-handbook repo
    #     from: ????@princeton.edu
    #     to: ????@airtable.com
    #     cc: ops@princeton.edu # do we have something like this?
    #     attach:
    #       # TODO: change path
    #       - /Users/alicia/gitlabissues.csv
>>>>>>> 480d8322c (adds rough draft of email task)
=======
    - name: Send e-mail with CSV attached
      community.general.mail:
      # TODO: fill in TLS and other
        host: lib-ponyexpr-prod.princeton.edu
        port: 25
        # username: "{{  }}"
        # password: "{{  }}"
        subject: GitLab Issue report
        body: Issues from the ops-team-handbook repo
        from: ac2754@princeton.edu
        to: acozine@airtable.com
        # cc: ops@princeton.edu # do we have something like this?
        attach:
          # TODO: change path
          - /opt/gitlab_issues/gitlabissues.csv
>>>>>>> 5d4982618 (refines playbook, handles commas in title data, adds email task, allows email from Tower exec nodes)
