---
# you MUST run this playbook on a single host with '--limit' for example `ansible-playbook -v --limit lib-adc2.princeton.edu playbooks/nginxplus_production.yml`
# to update the second load-balancer, switch which adc# host is currently active, then run the playbook on the second (formerly active, now inactive) host
# to update configuration for existing sites, run with '-t update_conf' for example `ansible-playbook -v --limit lib-adc2.princeton.edu playbooks/nginxplus_production.yml -t update_conf`
# to replace SSL certificates and keys, run with '-t SSL'
# if you want to remove obsolete config files, you must pass '-e nginx_cleanup_config=true'
# note that this will delete the entire config directory

- name: update loadbalancer configuration
  hosts: nginxplus_production # default to staging when we get a staging environment going
  remote_user: pulsys
  strategy: linear
  become: true
  vars_files:
    - ../group_vars/nginxplus/main.yml

  pre_tasks:
  - name: stop playbook if you didn't use --limit
    fail:
      msg: "you must use -l or --limit"
    when: ansible_limit is not defined
    run_once: true

  - name: tell infrastructure and ansible-alerts the playbook is starting
    community.general.slack:
      token: "{{ vault_tower_slack_token }}"
      msg: "Ansible is now running `{{ ansible_play_name }}` with the `{{ ansible_run_tags }}` tag on {{ inventory_hostname }}"
      channel: "{{ item }}"
    loop: "{{ slack_alerts_channel }}"
    tags: always

  # updates existing load balancer
  roles:
    - role: ../roles/nginxplus

- name: restart nginx with updated loadbalancer configuration
  hosts: nginxplus_production
  remote_user: pulsys
  strategy: linear
  become: true
  vars_files:
    - ../group_vars/nginxplus/main.yml

  tasks:
    - name: nginxplus | restart nginx for realsies
      service:
        name: nginx
        state: restarted
      tags: always

  post_tasks:
    - name: tell everyone on slack you ran an ansible playbook
      community.general.slack:
        token: "{{ vault_pul_slack_token }}"
        msg: "Ansible ran `{{ ansible_play_name }}` on {{ inventory_hostname }}"
        channel: "{{ item }}"
      loop: "{{ slack_alerts_channel }}"
      tags: always
