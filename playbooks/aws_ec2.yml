---
# this playbook will create a globus VM
# Ansible expects you to have `~/.aws/credentials` configured
# you will need to create these on your own
# the playbook will create a user `{{ project_user }}` as created in the `pre_tasks` block
# If the playbook creates a new `{{ project_user }}` with access keys and saves them in your
# ~/.aws/ansible_key_list.txt if none exists. These variables will need to go inventory_hostname
# `group_vars/globus/vault.yml` if this is the first time running
#
# by default this playbook runs in the staging environment
# to run in production, pass '-e runtime_env=production'
# 
# by default the ec2 instace will be called "pdc-globus-staging" (or production)
# to give it a different name pass '-e ec2_name=any-name-I-want'
#
# NOTE: You may need to run `pipenv sync` in your princeton_ansible shell
# in order to install boto3 and other AWS required libraries.
#

- name: build a Globus ec2 instance
  hosts: localhost
  gather_facts: false
  vars:
    - safe_runtime_env: "{{ runtime_env | default('staging') }}"
    - default_ec2_name: "pdc-globus-{{ safe_runtime_env }}"
    - safe_ec2_name: "{{ ec2_name |  default(default_ec2_name) }}"
  vars_files:
    - ../group_vars/globus/{{ safe_runtime_env }}.yml
    - ../group_vars/globus/common.yml
    - ../group_vars/globus/vault.yml
  pre_tasks:
    - block:
        - name: check for "{{ project_user }}"
          community.aws.iam_access_key_info:
            user_name: "{{ project_user }}"
          register: user_check

        - name: create iam group
          ansible.builtin.shell: 'aws iam create-group --group-name "{{ project_user }}"'
          when:
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: assign profile to iam_group
          ansible.builtin.shell: 'aws iam attach-group-policy --group-name "{{ project_user }}" --policy-arn arn:aws:iam::aws:policy/PowerUserAccess'
          when:
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: create iam user who will create ec2
          ansible.builtin.shell: 'aws iam create-user --user-name "{{ project_user }}"'
          when:
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: add user to group
          ansible.builtin.shell: 'aws iam add-user-to-group --group-name "{{ project_user }}" --user-name "{{ project_user }}"'
          when:
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: create iam user keys
          ansible.builtin.shell: 'aws iam create-access-key --user-name "{{ project_user }}" >> ~/.aws/ansible_key_list.txt'
          when: 
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: create iam users login-profile
          ansible.builtin.shell: 'aws iam create-login-profile --user-name "{{ project_user }}" --password "{{ project_user_password }}"'
          when: 
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"

        - name: list iam users key
          ansible.builtin.shell: 'cat key_list.txt | grep "UserName\|AccessKeyId\|SecretAccessKey" | sed "s/,$//"'
          register: list_key
          when: 
            - user_check.error is defined
            - "'NoSuchEntity' in user_check.error.code"
      ignore_errors: true
  tasks:
    - name: create globus security group
      amazon.aws.ec2_group:
        name: pul-acdc-globus-sg
        aws_access_key: "{{ project_user_aws_access_key }}"
        aws_secret_key: "{{ project_user_aws_secret_key }}"
        description: prds-globus security group
        vpc_id: "{{ vpc_id }}"
        group_id: "{{ group_id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
              - 50000 - 51000
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 2811
            to_port: 2811
            cidr_ip: "{{ globus_cidr_range }}"

    - name: start an instance with a public IP address
      amazon.aws.ec2_instance:
        aws_access_key: "{{ project_user_aws_access_key }}"
        aws_secret_key: "{{ project_user_aws_secret_key }}"
        name: "{{ safe_ec2_name }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        security_groups:
          - "{{ globus_ssh_security_group }}"
          - "{{ globus_app_security_group }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image_id }}"
        wait: true
        region: "{{ region }}"
        cpu_options:
          core_count: "{{ aws_core_count | default('1') }}"
          threads_per_core: "{{ aws_threads_count | default('1') }}"
        network:
          assign_public_ip: true
        tags:
          Name: prds-globus
      register: ec2

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 60
        timeout: 320
      loop: "{{ ec2.instances }}"

  post_tasks:
    - name: tell everyone on slack you ran an ansible playbook
      community.general.slack:
        token: "{{ vault_pul_slack_token }}"
        msg: "Ansible ran `{{ ansible_play_name }}` on {{ inventory_hostname }}"
        channel: #server-alerts
