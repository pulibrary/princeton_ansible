---
# Ansible expects you to have `~/.aws/credentials` configured.
# The contents of the file will have `aws_access_key_id` and
# `aws_secret_access_key`
# by default this playbook runs in the staging environment
# to run in production, pass '-e runtime_env=production'

# NOTE: You may need to run `pipenv sync` in your princeton_ansible shell
# in order to install boto3 and other AWS required libraries.

# Try running this command to see if your permissions are set up correctly:
# aws ec2 describe-instances --query 'Reservations[*].Instances[?not_null(PublicIpAddress)]' | jq -r '.[][]|.PublicIpAddress+" "+(.Tags[]|select(.Key=="Name").Value)'

# If you get an error saying "You are not authorized to perform this operation." then your permissions aren't right yet.

- name: build an ec2 instance
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../group_vars/globus/{{ runtime_env | default('staging') }}.yml
    - ../group_vars/globus/common.yml
    - ../group_vars/globus/vault.yml
  tasks:
    - name: create iam user who will create ec2
      community.aws.iam_user:
        name: "{{ project_user }}"
        password: "{{ project_user_password }}"
        managed_policies:
          - arn:aws:iam::aws:policy/PowerUserAccess
        state: present

    - name: create iam users key
      community.aws.iam_access_key:
        user_name: "{{ project_user }}"
        state: present

    - name: Fetch Access keys for a iam user
      community.aws.iam_access_key_info:
        user_name: "{{ project_user }}"
      register: user_key

    - debug:
        var: user_key.stdout_lines

          #    - name: start an instance with a public IP address
          #      amazon.aws.ec2_instance:
          #        name: "pdc-globus-{{ runtime_env | default('staging') }}"
          #        vpc_subnet_id: "{{ vpc_subnet_id }}"
          #        security_groups:
          #          - "{{ globus_ssh_security_group }}"
          #          - "{{ globus_app_security_group }}"
          #        instance_type: "{{ instance_type }}"
          #        image_id: "{{ image_id }}"
          #        wait: true
          #        region: "{{ region }}"
          #        cpu_options:
          #          core_count: "{{ aws_core_count | default('1') }}"
          #          threads_per_core: "{{ aws_threads_count | default('1') }}"
          #        network:
          #          assign_public_ip: true
          #        tags:
          #          Name: PRDS
          #      register: ec2
          #
          #    - name: Wait for SSH to come up
          #      delegate_to: "{{ item.public_dns_name }}"
          #      wait_for_connection:
          #        delay: 60
          #        timeout: 320
          #      loop: "{{ ec2.instances }}"
          #
          #  post_tasks:
          #    - name: tell everyone on slack you ran an ansible playbook
          #      community.general.slack:
          #        token: "{{ vault_pul_slack_token }}"
          #        msg: "Ansible ran `{{ ansible_play_name }}` on {{ inventory_hostname }}"
          #        channel: #server-alerts
