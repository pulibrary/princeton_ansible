---
# File: dnsmasq.yml - Dnsmasq tasks for Consul
- name: Pul_nomad | dnsmasq | Create dnsmasq user/group
  block:
    # Add group
    - name: Pul_nomad | dnsmasq | Add dnsmasq group
      ansible.builtin.group:
        name: "dnsmasq"
        state: present

    # Add user
    - name: Pul_nomad | dnsmasq | Add dnsmasq user
      ansible.builtin.user:
        name: "dnsmasq"
        comment: Consul user
        group: "dnsmasq"
        system: true

- name: Pul_nomad | dnsmasq | Install Dnsmasq package
  ansible.builtin.package:
    name: "dnsmasq"
    state: present
  become: true
  tags: dnsmasq, installation

# VMWare assigned different names to our VMs
- name: Detect active network connection name
  block:
    # Get the active ethernet connection NAME (not device)
    - name: Get active ethernet connection name
      shell: |
        nmcli -t -f NAME,TYPE,DEVICE connection show --active | grep ethernet | grep -v -- '--' | head -1 | cut -d: -f1
      register: active_connection_result
      changed_when: false

    - name: Set detected connection name
      set_fact:
        detected_interface: "{{ active_connection_result.stdout | trim }}"
      when: 
        - active_connection_result.stdout is defined
        - active_connection_result.stdout | trim != ""

    - name: Debug - Show detected connection
      debug:
        msg: "Detected NetworkManager connection name: {{ detected_interface | default('NOT DETECTED') }}"

    # Fallback if no active ethernet connection
    - name: Get any ethernet connection if none active
      shell: |
        nmcli -t -f NAME,TYPE connection show | grep ethernet | head -1 | cut -d: -f1
      register: any_ethernet_connection
      changed_when: false
      when: detected_interface is not defined

    - name: Set detected connection name from any ethernet
      set_fact:
        detected_interface: "{{ any_ethernet_connection.stdout | trim }}"
      when:
        - detected_interface is not defined
        - any_ethernet_connection.stdout is defined
        - any_ethernet_connection.stdout | trim != ""

# We need to get DNSMasq's 127.0.0.1 above the Princeton nameservers, but
# NetworkManager manages DNS on RedHat machines. This updates the connection to
# prepend the DNS server.
- name: Pul_nomad | dnsmasq | Configure DNS for consul
  become: true
  ansible.builtin.shell: '/bin/nmcli connection modify "{{ detected_interface }}" ipv4.dns "127.0.0.1" && /bin/nmcli connection up "{{ detected_interface }}"'
  when:
    - ansible_os_family == 'RedHat'
    - detected_interface is defined
  changed_when: false
  tags:
    - notest
  register: dns_config_result
  failed_when: 
    - dns_config_result.rc != 0
    - "'already active' not in dns_config_result.stderr"

- name: Pul_nomad | dnsmasq | Warn if DNS configuration was skipped
  debug:
    msg: "WARNING: Could not detect network interface for DNS configuration. DNSMasq may not work properly."
  when:
    - ansible_os_family == 'RedHat'
    - detected_interface is not defined

- name: Pul_nomad | dnsmasq | Create Dnsmasq configuration
  ansible.builtin.copy:
    src: dnsmasq/dnsmasq.conf
    dest: "/etc/dnsmasq.conf"
    owner: root
    group: "root"
    mode: "0644"
  become: true
  notify: restart dnsmasq

- name: Pul_nomad | dnsmasq | Create Dnsmasq configuration # noqa no-jinja-when
  ansible.builtin.template:
    src: dnsmasq/dnsmasq-10-consul.j2
    dest: "/etc/dnsmasq.d/10-consul"
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: restart dnsmasq

- name: Pul_nomad | dnsmasq | Disable systemd-resolved
  when: ansible_service_mgr == "systemd"
  block:
    - name: Pul_nomad | dnsmasq | Check if systemd-resolved service exists
      ansible.builtin.stat:
        path: /lib/systemd/system/systemd-resolved.service
      register: systemd_resolved_service

    - name: Pul_nomad | dnsmasq | Disable systemd-resolved service
      ansible.builtin.service:
        name: systemd-resolved
        enabled: false
        state: stopped
      become: true
      when: systemd_resolved_service.stat.exists

    - name: Pul_nomad | dnsmasq | Check if resolv.conf is pointing to systemd-resolved
      ansible.builtin.stat:
        path: /etc/resolv.conf
      register: resolv_dot_conf

    - name: Pul_nomad | dnsmasq | Configure resolv.conf for dnsmasq
      when:
        - resolv_dot_conf.stat.exists
        - resolv_dot_conf.stat.islnk
        - resolv_dot_conf.stat.lnk_source == "/run/systemd/resolve/stub-resolv.conf"
      become: true
      block:
        - name: Pul_nomad | dnsmasq | Remove resolv.conf association with systemd-resolved
          ansible.builtin.file:
            path: /etc/resolv.conf
            state: absent

        - name: Pul_nomad | dnsmasq | Add a nameserver entry poining to localhost for dnsmasq
          ansible.builtin.lineinfile:
            path: /etc/resolv.conf
            regexp: ^nameserver 127.0.0.1
            line: nameserver 127.0.0.1
            create: true
            owner: root
            group: root
            mode: u=rw,g=r,o=r

- name: Pul_nomad | dnsmasq | Enable DNSMasq
  ansible.builtin.service:
    name: dnsmasq
    state: started
    enabled: true
