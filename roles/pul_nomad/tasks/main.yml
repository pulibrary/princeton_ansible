---
# tasks file for pul_nomad
- name: 'pul_nomad | Install consul'
  ansible.builtin.include_role:
    name: 'ansible-consul'
    public: true
  tags:
    - consul_acl
    - dnsmasq

# Set up a runner host
- name: 'pul_nomad | register a host to run unique commands'
  set_fact:
    unique_command_runner: "{{ groups['nomad_servers'][0] }}"
  run_once: true
  tags: consul_acl

# Output unique_command runner
- name: 'pul_nomad | output unique_command_runner'
  debug:
    msg: "unique_command_runner: {{ unique_command_runner }}, inventory_hostname: {{ inventory_hostname }}"

# Set up DNS ACLs
# Get current tokens
- name: 'pul_nomad | Register existing tokens'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token list -format json"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  register: tokens
  changed_when: false
  tags: consul_acl

- name: 'pul_nomad | Store existing_consul_tokens'
  set_fact:
    existing_consul_tokens: "{{ tokens.stdout | from_json | map(attribute='SecretID') }}"
  tags: consul_acl

- name: 'nomad-node | Register existing node identities'
  set_fact:
    existing_node_names: "{{ tokens.stdout | from_json | community.general.json_query('[*].NodeIdentities[].NodeName') }}"
  tags: consul_acl

- name: 'pul_nomad | Create DNS ACL token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -templated-policy 'builtin/dns' -secret '{{ consul_dns_token }}'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "consul_dns_token not in existing_consul_tokens"
  tags: consul_acl

- name: 'pul_nomad | Assign DNS ACL token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl set-agent-token dns '{{ consul_dns_token }}'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  tags: consul_acl

# Consul setup for nomad

# tasks file for pulibrary-nomad-node
- name: Add Docker GPG apt Key
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'Debian'"
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'Debian'"
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu jammy stable
    state: present

- name: Update apt and install docker-ce
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'Debian'"
  apt:
    name: docker-ce
    state: latest
    update_cache: true

- name: 'nomad-node | Keep Docker up'
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'Debian'"
  ansible.builtin.service:
    name: "docker"
    state: "started"
    enabled: true

# Only install podman on Rocky boxes - it's too out of date for Debian machines.
- name: 'pul_nomad | Install Podman'
  ansible.builtin.dnf:
      name: podman
      state: latest
  when:
    - "ansible_os_family == 'RedHat'"

# DMIDecode is needed for Rocky boxes, it makes cpu fingerprinting work.
- name: 'pul_nomad | Install dmidecode'
  ansible.builtin.dnf:
      name: dmidecode
      state: latest
  when:
    - "ansible_os_family == 'RedHat'"

- name: 'pul_nomad | Keep Podman up'
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'RedHat'"
  ansible.builtin.service:
    name: "podman.socket"
    state: "started"
    enabled: true

- name: 'pul_nomad | Create podman update override dir'
  ansible.builtin.file:
    path: /etc/systemd/system/podman-auto-update.service.d
    state: directory
  tags: podman_conf
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'RedHat'"

- name: 'pul_nomad | Prune podman containers nightly'
  ansible.builtin.copy:
    src: 'auto_update_override.conf'
    dest: /etc/systemd/system/podman-auto-update.service.d/override.conf
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'RedHat'"
  tags:
    - notest
    - podman_conf
  notify:
    - reload systemd

- name: 'pul_nomad | Configure nightly prune timer'
  when:
    - "nomad_node_role == 'client'"
    - "ansible_os_family == 'RedHat'"
  tags:
    - notest
    - podman_conf
  ansible.builtin.service:
    name: "podman-auto-update.timer"
    state: "started"
    enabled: true

- name: 'pul_nomad | Create Nomad Client Policy to reference'
  ansible.builtin.copy:
    src: pul_nomad_client_policy.hcl
    dest: "/etc/consul/pul_nomad_client_policy.hcl"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
  tags: consul_acl

- name: 'pul_nomad | Create Nomad Task Policy to reference'
  ansible.builtin.copy:
    src: pul_nomad_client_policy.hcl
    dest: "/etc/consul/pul_nomad_task_policy.hcl"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
  tags: consul_acl

- name: 'pul_nomad | Create Nomad Server Policy to reference'
  ansible.builtin.copy:
    src: pul_nomad_server_policy.hcl
    dest: "/etc/consul/pul_nomad_server_policy.hcl"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
  tags: consul_acl

- name: 'pul_nomad | Register existing policies'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl policy list -format json"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  register: policies
  changed_when: false
  tags: consul_acl

- name: 'pul_nomad | Store existing_consul_policies'
  set_fact:
    existing_consul_policies: "{{ policies.stdout | from_json | map(attribute='Name') }}"
  tags: consul_acl

- name: 'pul_nomad | Install Nomad Client Consul Policy'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl policy create -name 'nomad-client-agents' -description 'Policy for Nomad agents' -rules '@/etc/consul/pul_nomad_client_policy.hcl'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "'nomad-client-agents' not in existing_consul_policies"
  tags: consul_acl

- name: 'pul_nomad | Install Nomad Task Consul Policy'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl policy create -name 'nomad-task-policy' -description 'Policy for Nomad tasks to read Consul' -rules '@/etc/consul/pul_nomad_task_policy.hcl'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "'nomad-task-policy' not in existing_consul_policies"
  tags: consul_acl

- name: 'pul_nomad | Install Nomad Server Consul Policy'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl policy create -name 'nomad-server-agents' -description 'Policy for Nomad agents' -rules '@/etc/consul/pul_nomad_server_policy.hcl'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "'nomad-server-agents' not in existing_consul_policies"
  tags: consul_acl

- name: 'pul_nomad | Create nomad client ACL token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -policy-name 'nomad-client-agents' -secret '{{ nomad_client_consul_token }}'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "nomad_client_consul_token not in existing_consul_tokens"
  tags: consul_acl

- name: 'pul_nomad | Create nomad server ACL token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -policy-name 'nomad-server-agents' -secret '{{ nomad_server_consul_token }}'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "nomad_server_consul_token not in existing_consul_tokens"
  tags: consul_acl

- name: 'pul_nomad | Create nomad task ACL token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -policy-name 'nomad-task-policy' -secret '{{ nomad_task_consul_token }}'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "nomad_task_consul_token not in existing_consul_tokens"
  tags: consul_acl

- name: 'nomad-node | Generate Consul Client ACL Agent Token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -policy-name 'nomad-client-agents' -node-identity '{{ inventory_hostname_short }}:dc1' -format json"
  when:
    - "inventory_hostname_short not in existing_node_names"
    - "consul_node_role == 'client'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  register: created_agent_token_client
  changed_when: false
  tags: consul_acl

- name: 'nomad-node | Generate Consul Server ACL Agent Token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl token create -policy-name 'nomad-server-agents' -node-identity '{{ inventory_hostname_short }}:dc1' -format json"
  when:
    - "inventory_hostname_short not in existing_node_names"
    - "consul_node_role == 'server'"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  register: created_agent_token_server
  changed_when: false
  tags: consul_acl

- name: 'nomad-node | Set Consul ACL Agent Token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl set-agent-token agent {{ created_agent_token_server.stdout | from_json | community.general.json_query('SecretID')}}"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "inventory_hostname_short not in existing_node_names"
    - "consul_node_role == 'server'"
    - created_agent_token_server
  tags: consul_acl

- name: 'nomad-node | Set Consul ACL Agent Token'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/consul acl set-agent-token agent {{ created_agent_token_client.stdout | from_json | community.general.json_query('SecretID')}}"
  environment:
    CONSUL_HTTP_TOKEN: '{{ consul_acl_master_token }}'
  when:
    - "inventory_hostname_short not in existing_node_names"
    - "consul_node_role == 'client'"
    - created_agent_token_client
  tags: consul_acl

# We need to get DNSMasq's 127.0.0.1 above the Princeton nameservers, but
# NetworkManager manages DNS on RedHat machines. This updates the connection to
# prepend the DNS server.
- name: 'pul_nomad | Configure DNS for consul'
  become: true
  ansible.builtin.shell: '/bin/nmcli connection modify {{ ansible_default_ipv4.interface }} ipv4.dns "127.0.0.1" && /bin/nmcli connection up {{ ansible_default_ipv4.interface }}'
  when:
    - "ansible_os_family == 'RedHat'"
  tags:
    - notest

# Control DNSMasq configuration
- name: Create Dnsmasq configuration
  ansible.builtin.copy:
    src: dnsmasq.conf
    dest: "/etc/dnsmasq.conf"
    owner: root
    group: "root"
    mode: "0644"
  become: true
  notify: restart dnsmasq
  when:
    - "ansible_os_family == 'RedHat'"
  tags: dnsmasq

# Allows DNSMasq to listen on the podman interface, so containers can query
# consul. ENS160 is the WLAN interface - listen on everything else.
- name: Create Dnsmasq configuration for podman
  ansible.builtin.copy:
    src: dnsmasq-11-podman.conf
    dest: "/etc/dnsmasq.d/11-podman"
    owner: root
    group: "root"
    mode: "0644"
  become: true
  notify: restart dnsmasq
  when:
    - "ansible_os_family == 'RedHat'"
  tags: dnsmasq

- name: 'pul_nomad | Install nomad'
  ansible.builtin.include_role:
    name: 'ansible-nomad'
    public: true
  tags: host_volumes

- name: 'pul_nomad | Register existing nomad acl tokens'
  ansible.builtin.shell:
    cmd: "/usr/local/bin/nomad acl token list || true"
  environment:
    NOMAD_TOKEN: '{{ pul_nomad_management_token }}'
  register: nomad_acl_tokens
  when:
    - "unique_command_runner == inventory_hostname"
  changed_when: false

- name: 'pul_nomad | Bootstrap nomad'
  ansible.builtin.command:
    cmd: /usr/local/bin/nomad acl bootstrap -
    stdin: '{{ pul_nomad_management_token }}'
  when:
    - "unique_command_runner == inventory_hostname"
    - "'Bootstrap Token' not in nomad_acl_tokens.stdout "

- import_tasks: dpul_c.yml
  tags:
    - notest
    - dpulc

- import_tasks: imagecat_staging.yml
  tags:
    - notest
    - imagecat
- import_tasks: imagecat_production.yml
  tags:
    - notest
    - imagecat

- import_tasks: abid_staging.yml
  tags:
    - notest
    - abid
- import_tasks: abid_production.yml
  tags:
    - notest
    - abid

- import_tasks: logging.yml
  tags:
    - notest
    - logging

- import_tasks: traefik_wall.yml
  tags:
    - notest
    - traefik_wall

- import_tasks: circleci_deployer.yml
  tags:
    - notest
    - circleci_deployer

- name: 'pul_nomad | Install deploy user'
  ansible.builtin.include_role:
    name: 'deploy_user'
    public: true
  when:
    - "nomad_node_role == 'server'"

- name: 'pul_nomad | export NOMAD_TOKEN for deploy user'
  ansible.builtin.lineinfile:
    dest: "/home/deploy/.bashrc"
    state: present
    regexp: '^export NOMAD_TOKEN'
    line: "export NOMAD_TOKEN={{ pul_nomad_management_token }}"
    insertbefore: BOF
  when:
    - "nomad_node_role == 'server'"
- name: 'pul_nomad | export GITHUB_TOKEN for deploy user'
  ansible.builtin.lineinfile:
    dest: "/home/deploy/.bashrc"
    state: present
    regexp: '^export GITHUB_TOKEN'
    line: "export GITHUB_TOKEN={{ tower_github_token }}"
    insertbefore: BOF
  when:
    - "nomad_node_role == 'server'"
