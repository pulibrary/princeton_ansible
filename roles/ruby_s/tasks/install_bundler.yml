---
- name: ruby_s | uninstall wrong version of bundler
  ansible.builtin.command: gem uninstall bundler
  register: bundler_uninstall

- name: ruby_s | get gem home
  ansible.builtin.shell: gem env home
  register: bundler_home
  when: (bundler_uninstall.stdout is search("default gem"))

- name: ruby_s | remove installed bundler if default
  ansible.builtin.file:
    path: '{{ bundler_home.stdout }}/specifications/default/bundler-{{ installed_bundler.stdout }}.gemspec'
    state: absent
  when: (bundler_uninstall.stdout is search("default gem"))

- name: ruby_s | install global bundler, specific version
  ansible.builtin.command: gem install bundler -v {{ bundler_version }}
  when: bundler_version is defined

- name: ruby_s | install global bundler, any version
  ansible.builtin.command: gem install bundler
  when: bundler_version is undefined

- name: ruby_s | update rubygems
  ansible.builtin.command: gem update --system
  become: true
