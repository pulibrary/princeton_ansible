---
# Opinionated journald limits — ALWAYS enforced.
# Target = 2% of / (bounded 400–2048 MiB), file ~1/8 target (min 64 MiB), 10 files.

- name: Common | only on systemd systems (so BSD's are left out)
  ansible.builtin.meta: end_host
  when: ansible_service_mgr != "systemd"
  tags: [common, journald]

- name: Common | gather minimal facts for mounts
  ansible.builtin.setup:
    gather_subset:
      - mount
  tags: [common, journald]

- name: Common | locate root mount
  ansible.builtin.set_fact:
    _root_mount: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
  failed_when: _root_mount is not defined
  tags: [common, journald]

- name: Journald | compute target sizes (MiB)
  vars:
    _floor_mib: "{{ journald_limits_floor_mib | default(400) }}"
    _ceiling_mib: "{{ journald_limits_ceiling_mib | default(2048) }}"
    _pct: "{{ journald_limits_percent_of_root | default(2) }}"
    _fs_total_mib: "{{ (_root_mount.size_total | int) // (1024*1024) }}"
    _pct_target_mib: "{{ ((_fs_total_mib * _pct) // 100) | int }}"
    _bounded_target_mib: "{{ [ [_pct_target_mib, _floor_mib] | max, _ceiling_mib ] | min }}"
    _ratio: "{{ journald_limits_file_size_ratio | default(0.125) }}"
    _file_mib_calc: "{{ (_bounded_target_mib * _ratio) | float | round(0, 'floor') | int }}"
  ansible.builtin.set_fact:
    systemd_journal_max_use_mib: "{{ _bounded_target_mib }}"
    systemd_journal_max_file_mib: "{{ [_file_mib_calc, 64] | max }}"
    journald_limits_max_files: "{{ journald_limits_max_files | default(10) }}"
    journald_limits_assert_slack_mib: "{{ journald_limits_assert_slack_mib | default(128) }}"
    journald_limits_dropin_dir: "{{ journald_limits_dropin_dir | default('/etc/systemd/journald.conf.d') }}"
    journald_limits_dropin_file: "{{ journald_limits_dropin_file | default('10-pul-limits.conf') }}"
    journald_limits_vacuum_if_over: "{{ journald_limits_vacuum_if_over | default(true) }}"
  tags: [common, journald]

- name: Common | ensure drop-in dir exists
  ansible.builtin.file:
    path: "{{ journald_limits_dropin_dir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  tags: [common, journald]

- name: Common | render limits drop-in (ALWAYS enforced)
  ansible.builtin.template:
    src: journald-limits.conf.j2
    dest: "{{ journald_limits_dropin_dir }}/{{ journald_limits_dropin_file }}"
    mode: "0644"
    owner: root
    group: root
  notify: restart journald
  tags: [common, journald]
  when:
    - running_on_server

- name: Common | fail if service is masked
  ansible.builtin.command: systemctl is-enabled systemd-journald
  register: _journald_enabled
  changed_when: false
  failed_when: _journald_enabled.stdout is search('masked')
  tags: [common, journald]
  when:
    - running_on_server

- name: Common | ensure service is started
  ansible.builtin.service:
    name: systemd-journald
    state: started
  tags: [common, journald]
  when:
    - running_on_server

# Observe & enforce usage --------------------------------------------------
- name: Common | read current disk usage (human)
  ansible.builtin.command: journalctl --disk-usage
  register: journald_du_human
  changed_when: false
  tags: [common, journald]
  when:
    - running_on_server

    # variables are here to avoid variable precedence
- name: Common | parse current usage to MiB
  ansible.builtin.set_fact:
    journald_current_usage_mib: "{{ (_val * _mult) | float | round(0, 'floor') | int }}"
  vars:
    _m: "{{ journald_du_human.stdout | regex_search('take up\\s+([0-9.]+)([GMK])', '\\1|\\2') }}"
    _val: "{{ (_m | default('0|M')).split('|')[0] | float }}"
    _unit: "{{ (_m | default('0|M')).split('|')[1] }}"
    _mult: >-
      {{ 1024 if _unit == 'G'
         else 1 if _unit == 'M'
         else 1/1024 }}
  tags: [common, journald]
  when:
    - running_on_server

- name: Common | vacuum now if over target
  ansible.builtin.command: "journalctl --vacuum-size={{ systemd_journal_max_use_mib }}M"
  when:
    - running_on_server
    - journald_limits_vacuum_if_over | bool
    - journald_current_usage_mib | int > systemd_journal_max_use_mib | int
  changed_when: true
  tags: [common, journald]

- name: Common | re-check disk usage
  ansible.builtin.command: journalctl --disk-usage
  register: journald_du_human_after
  changed_when: false
  tags: [common, journald]
  when:
    - running_on_server

- name: Common | parse re-check usage to MiB
  ansible.builtin.set_fact:
    journald_current_usage_mib_after: "{{ (_val2 * _mult2) | float | round(0, 'floor') | int }}"
  vars:
    _m2: "{{ journald_du_human_after.stdout | regex_search('take up\\s+([0-9.]+)([GMK])', '\\1|\\2') }}"
    _val2: "{{ (_m2 | default('0|M')).split('|')[0] | float }}"
    _unit2: "{{ (_m2 | default('0|M')).split('|')[1] }}"
    _mult2: >-
      {{ 1024 if _unit2 == 'G'
         else 1 if _unit2 == 'M'
         else 1/1024 }}
  tags: [common, journald]
  when:
    - running_on_server

- name: Common | assert usage within policy
  ansible.builtin.assert:
    that:
      - journald_current_usage_mib_after
        <= (systemd_journal_max_use_mib + journald_limits_assert_slack_mib)
    fail_msg: >-
      journald usage {{ journald_current_usage_mib_after }} MiB exceeds
      target {{ systemd_journal_max_use_mib }} MiB (+{{ journald_limits_assert_slack_mib }} MiB slack).
    success_msg: >-
      journald usage OK: {{ journald_current_usage_mib_after }} MiB
      (target {{ systemd_journal_max_use_mib }} MiB).
  tags: [common, journald]
  when:
    - running_on_server
