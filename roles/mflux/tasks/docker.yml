---
- name: MFlux | copy run script | when in docker
  ansible.builtin.copy:
    src: files/runit.sh
    dest: /opt/mediaflux/runit.sh
    mode: '0777'

- name: Mflux | create the logs directory | when in docker
  ansible.builtin.file:
    path: "{{ mediaflux_home }}/volatile/logs"
    state: directory
    owner: "{{ mflux_user }}"
    group: "{{ mflux_user }}"
    mode: "u=rw,g=rw,o=r"

- name: Mflux | create start log file | when in docker
  ansible.builtin.file:
    path: "{{ mediaflux_home }}/volatile/logs/runit.log"
    state: touch
    owner: "{{ mflux_user }}"
    group: "{{ mflux_user }}"
    mode: "u=rw,g=rw,o=r"

- name: Mflux | Start mediaflux | when in docker
  ansible.builtin.shell: "/opt/mediaflux/runit.sh <{{ mediaflux_home }}/volatile/logs/runit.log >{{ mediaflux_home }}/volatile/logs/runit.log 2>&1 &"
  tags:
    - mediaflux
    - init

- name: Mflux | Wait for mediaflux | when in docker
  ansible.builtin.wait_for:
    port: 80

- name: install the mediaflux desktop | when in docker
  ansible.builtin.command: java -Dmf.host=localhost -Dmf.transport=http -Dmf.domain=system -Dmf.user=manager -Dmf.password=change_me -Dmf.port=80 -jar /opt/mediaflux/bin/aterm.jar --app exec package.install :url https://www.arcitecta.com/software/adesktop/1.2.020/adesktop_1.2.020.zip

- name: install the cas login | when in docker
  ansible.builtin.command: java -Dmf.host=localhost -Dmf.transport=http -Dmf.domain=system -Dmf.user=manager -Dmf.password=change_me -Dmf.port=80 -jar /opt/mediaflux/bin/aterm.jar --app exec package.install :url {{ vault_mflux_cas_download_link }}

# Run the ldap configuration tasks
- name: Mflux | import ldap-config tasks
  ansible.builtin.import_tasks: ldap-config.yml

- name: Mflux | role create dictionary namespaces
  ansible.builtin.command: java -Dmf.host=localhost -Dmf.transport=http -Dmf.domain=system -Dmf.user=manager -Dmf.password="{{ mflux_manager_password }}" -Dmf.port=80 -jar /opt/mediaflux/bin/aterm.jar --app exec	dictionary.namespace.create :namespace {{ item }} :ifexists ignore
  loop:
    - "princeton"
    - "princeton.tigerdata"

# Run the custom roles configuration tasks
- name: Mflux | import custom-roles tasks
  ansible.builtin.import_tasks: custom-roles.yml

# Remove SHA1 from /etc/crypto-policies/back-ends/java.config
- name: Mflux | Allow SHA1
  ansible.builtin.replace:
    path: /etc/crypto-policies/back-ends/java.config
    regexp: 'SHA1'
