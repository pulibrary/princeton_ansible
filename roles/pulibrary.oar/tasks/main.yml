---
# tasks file for roles/pulibrary.oar
- include_tasks: oar_config.yml

- name: oar | install pyopenssl
  apt:
    name: ["python-openssl", "python3-openssl"]
    state: present
    update_cache: true

- name: oar | create nginx includes directory
  file:
    path: /etc/nginx/include/{{ item }}
    state: directory
  loop:
    - csr
    - certs
    - private

- name: oar | Generate an OpenSSL private key
  openssl_privatekey:
    path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    size: 2048

- name: oar | Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/nginx/include/csr/ssl-cert-snakeoil.csr
    privatekey_path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    common_name: oar-staging.princeton.edu

- name: oar | create a Self Signed OpenSSL certificate
  openssl_certificate:
    path: /etc/nginx/include/certs/ssl-cert-snakeoil.pem
    privatekey_path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    csr_path: /etc/nginx/include/csr/ssl-cert-snakeoil.csr
    provider: selfsigned

- include_tasks: nginx_config.yml
- include_tasks: apache_config.yml
- include_tasks: shibd_config.yml

- name: oar | ensure private directory exists
  file:
    path: "{{ atmire_path }}/private"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  when: running_on_server

- name: oar | ensure private repo config
  template:
    src: private.cfg.j2
    dest: "{{ atmire_path }}/private/config"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  when: running_on_server

- name: oar | clone src
  git:
    repo: "{{ atmire_dspace_git_path }}"
    dest: "/home/{{ deploy_user }}/src"
    force: true
    version: "{{ atmire_git_branch }}"
  when: running_on_server

- name: oar | make sure recursive permissions
  file:
    path: "/home/{{ deploy_user }}/src"
    recurse: true
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: u=rwx,g=rw,o=r
  when: running_on_server

- name: oar | make sure install is created
  file:
    path: "{{ dspace_install_directory }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  when: running_on_server

- name: oar | Create symbolic link for mounted directory
  file:
    src: "{{ dspace_install_directory }}"
    dest: "/home/{{ deploy_user }}/dspace"
    state: link
  when: running_on_server

- name: oar | Create symbolic link on root directory
  file:
    src: "/home/{{ deploy_user }}/dspace"
    dest: "/dspace"
    state: link
  when: running_on_server