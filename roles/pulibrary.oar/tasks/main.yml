---
# tasks file for roles/pulibrary.oar
- name: oar | setup the dspace mount
  file:
    path: "{{ dspace_install_path }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | ensure {{ deploy_user }} netrc
  template:
    src: netrc_config.j2
    dest: "/home/{{ deploy_user }}/.netrc"
    mode: 0664
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | ensure local-settings home is setup
  lineinfile:
    path: "/home/{{ deploy_user }}/local-settings.cfg"
    regexp: 'DSPACE_BASE="{% raw -%}{{dspace_user_home}}{% endraw -%}"'
    line: 'DSPACE_BASE="/home/{{ deploy_user }}"'
  changed_when: false

- name: oar | ensure local-settings repo branch is setup
  lineinfile:
    path: "/home/{{ deploy_user }}/local-settings.cfg"
    regexp: 'GIT_BRANCH={% raw -%}{{dspace_git_branch}}{% endraw -%}'
    line: 'GIT_BRANCH={{ atmire_git_branch }}'
  changed_when: false

- name: oar | ensure local-setting db user
  lineinfile:
    path: "/home/{{ deploy_user }}/local-settings.cfg"
    regexp: 'DSPACE_DB_USER=dspace'
    line: 'DSPACE_DB_USER={{ dspace_db_name }}'
  changed_when: false

- name: oar | ensure local-setting db
  lineinfile:
    path: "/home/{{ deploy_user }}/local-settings.cfg"
    regexp: 'DSPACE_DB=dspace'
    line: 'DSPACE_DB_USER={{ dspace_db_user }}'
  changed_when: false

- name: oar | ensure build config
  lineinfile:
    path: "/home/{{ deploy_user }}/local-settings.cfg"
    regexp: 'DSPACE_BUILD_CFG={%raw -%}{{dspace_build_cfg}}{% endraw -%}'
    line: 'DSPACE_BUILD_CFG={{ env }}'
  changed_when: false

- name: oar | install pyopenssl
  apt:
    name: ["python-openssl", "python3-openssl"]
    state: present
    update_cache: true

- name: oar | create nginx includes directory
  file:
    path: /etc/nginx/include/{{ item }}
    state: directory
  loop:
    - csr
    - certs
    - private

- name: oar | Generate an OpenSSL private key
  openssl_privatekey:
    path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    size: 2048

- name: oar | Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/nginx/include/csr/ssl-cert-snakeoil.csr
    privatekey_path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    common_name: oar-staging.princeton.edu

- name: oar | create a Self Signed OpenSSL certificate
  openssl_certificate:
    path: /etc/nginx/include/certs/ssl-cert-snakeoil.pem
    privatekey_path: /etc/nginx/include/private/ssl-cert-snakeoil.key
    csr_path: /etc/nginx/include/csr/ssl-cert-snakeoil.csr
    provider: selfsigned

- name: oar | add nginx config file
  template:
    src: oar_nginx.conf.j2
    dest: /etc/nginx/conf.d/oar_nginx.conf

- name: oar | add apache config file
  template:
    src: dspace.conf.j2
    dest: /etc/apache2/sites-available/dspace.conf

- name: oar | add nginx config file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - {src: blocked-ips.nginx.j2, dest: /etc/nginx/include/blocked-ips.nginx}
    - {src: blocked-agents.nginx.j2, dest: /etc/nginx/include/blocked-agents.nginx}
    - {src: grouped-agents.nginx.j2, dest: /etc/nginx/include/grouped-agents.nginx}
    - {src: proxy-to-apache.nginx.j2, dest: /etc/nginx/include/proxy-to-apache.nginx}
    - {src: static-headers.nginx.j2, dest: /etc/nginx/include/static-headers.nginx}

- name: oar | enable mod_proxy
  apache2_module:
    name: "{{ item }}"
    state: present
  loop:
    - proxy
    - proxy_ajp
    - proxy_http

- name: oar | remove apache default
  file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent

- name: oar | create symlink to enable site apache
  file:
    src: /etc/apache2/sites-available/dspace.conf
    dest: /etc/apache2/sites-enabled/dspace.conf
    state: link
  notify: restart apache

- name: oar | ensure {{ deploy_user }} pgpass
  template:
    src: pg_pass.j2
    dest: "/home/{{ deploy_user }}/.pgpass"
    mode: 0600
    owner: "{{ deploy_user }}"
  changed_when: false

- name: oar | ensure private directory exists
  file:
    path: "{{ atmire_path }}/private"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | ensure private repo config
  template:
    src: private.cfg.j2
    dest: "{{ atmire_path }}/private/config"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | Create symbolic link for the {{ maven_home }} directory
  file:
    src: "/opt/apache-maven-{{ maven_version }}"
    dest: "{{ dspace_maven_home }}"
    state: link

- name: oar | Create symbolic link for the {{ ant_home }} directory
  file:
    src: "/opt/apache-ant-{{ ant_version }}"
    dest: "{{ dspace_ant_home }}"
    state: link

- name: oar | Create exception for aliases
  template:
    src: aliases.local.j2
    dest: "/home/{{ deploy_user }}/.aliases.local"
    mode: 0664
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | Create settings configuration
  template:
    src: settings.xml.j2
    dest: "/home/{{ deploy_user }}/.m2/settings.xml"
    mode: 0664
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | clone src
  git:
    repo: "{{ atmire_dspace_git_path }}"
    dest: "/home/{{ deploy_user }}/src"
    force: true
    version: "{{ atmire_git_branch }}"

- name: oar | make sure recursive permissions
  file:
    path: "/home/{{ deploy_user }}/src"
    recurse: true
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: u=rwx,g=rw,o=r

- name: oar | make sure install is created
  file:
    path: "{{ dspace_install_directory }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: oar | Create symbolic link for mounted directory
  file:
    src: "{{ dspace_install_directory }}"
    dest: "/home/{{ deploy_user }}/dspace"
    state: link

- name: oar | Create symbolic link on root directory
  file:
    src: "/home/{{ deploy_user }}/dspace"
    dest: "/dspace"
    state: link

- name: oar | clean build out environment
  shell: "{{ atmire_path }}/dspace/scripts/build/clean-build.sh"
  become: true
  become_user: "{{ deploy_user }}"
  when: running_on_server

- name: oar | clean build environment
  shell: /home/dspace/scripts/build/build.sh
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ deploy_user }}"
  when: running_on_server

- name: oar | deploy environment
  shell: /home/dspace/scripts/build/deploy.sh
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ deploy_user }}"
  when: running_on_server
