---
- name: install npm
  apt:
    name: ["nodejs-dev", "node-gyp", "npm"]
    state: present
    update_cache: true
  changed_when: false

- name: Install gulp globally
  npm:
    name: gulp-cli
    global: true
  become: true

  # needed for capistrano to have access to this file
- name: Check to see if .env.local file exists.
  stat:
    path: "/home/{{ deploy_user }}/.env.local"
  register: env_home_exists

  # needed for capistrano to have access to this file
- name: Install .env.local in deploy user home directory for cap
  template:
    src: "env.local.j2"
    dest: "/home/{{ deploy_user }}/.env.local"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  when: not env_home_exists.stat.exists

- name: Add apache rules for discovery utils
  blockinfile:
    path: "/etc/apache2/sites-available/000-default.conf"
    marker: "## {mark} ANSIBLE MANAGED BLOCK ##"
    insertafter: "</Directory>"
    block: |
      Alias /utils {{ discoveryutils_docroot }}_cap/current/public
      <Directory "{{ discoveryutils_docroot }}_cap/current/public">
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
      </Directory>
  notify: restart apache

########### Drupal Start ######
# Drupal after this

- name: Create directory for drush site alias
  file:
    path: "/etc/drush"
    state: directory
    owner: "{{ systems_user }}"
    group: "{{ systems_user }}"

- name: Install drush site alias
  template:
    src: "aliases_drushrc_php.j2"
    dest: "/etc/drush/aliases.drushrc.php"
    owner: "{{ systems_user }}"
    group: "{{ systems_user }}"

- name: Check to see if settings.php home file exists.
  stat:
    path: "/home/{{ deploy_user }}/settings.php"
  register: settings_php_home_exists

- name: Install settings.php
  template:
    src: "settings.php.j2"
    dest: "/home/{{ deploy_user }}/settings.php"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  when: not settings_php_home_exists.stat.exists or force_settings

- name: Change owner to lib/www so deploy has access
  file:
    path: "/var/www"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Copy database dump
  copy:
    src: 'files/{{ drupal_dbimport_file }}'
    dest: '{{ drupal_docroot }}/{{ drupal_dbimport_file }}'
    owner: '{{ deploy_user }}'
    group: '{{ deploy_user }}'
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Import database from local dump file
  command: drush sql-cli < {{ drupal_dbimport_file }}
  args:
    chdir: "{{ drupal_docroot }}"
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Install drupal variable update file
  template:
    src: "update.sql.j2"
    dest: "{{ drupal_docroot }}/update.sql"
    owner: "{{ systems_user }}"
    group: "{{ systems_user }}"
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Setup the solr connection
  command: drush sql-cli < update.sql
  args:
    chdir: "{{ drupal_docroot }}"
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Clear the solr index
  command: drush search-api-clear
  args:
    chdir: "{{ drupal_docroot }}"
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Update the solr index
  command: drush search-api-index
  args:
    chdir: "{{ drupal_docroot }}"
  when: (drupal_dbimport_file is defined) and (inventory_hostname ==  groups[group_names[0]][0])

- name: Install smtp module
  command: drush -y en --resolve-dependencies smtp
  args:
    chdir: "{{ drupal_docroot }}"
  when: drupal_dbimport_file is defined

- name: Allow deploy user to chownership of the library directory
  lineinfile:
    dest: "/etc/sudoers"
    state: "present"
    line: "{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/chown -R www-data /var/www/library_cap"
    validate: "visudo -cf %s"

- name: disable apache php7.0 module
  apache2_module:
    state: absent
    name: php7.0
  notify: restart apache
  ignore_errors: yes

- name: enable apache php7.2 module
  apache2_module:
    state: present
    name: php7.2
  notify: restart apache

- name: Check to staff script exists.
  stat:
    path: "/usr/bin/get_staff_updates.sh"
  register: staff_scripts_exists

- name: Copy the staff script
  copy:
    src: 'files/get_staff_updates.sh'
    dest: '/usr/bin/get_staff_updates.sh'
    owner: '{{ deploy_user }}'
    group: '{{ deploy_user }}'
    mode: 0777
  when: not staff_scripts_exists.stat.exists

- name: install the cron job for staff
  cron:
    name: "staff profile"
    hour: 5
    job: "/usr/bin/get_staff_updates.sh"
    user: "{{ deploy_user }}"
  when: not staff_scripts_exists.stat.exists and (inventory_hostname ==  groups[group_names[0]][0])

- name: install the cron job for staff
  cron:
    name: "run drush cron"
    minute: 0
    job: "drush @prod cron"
    user: "{{ deploy_user }}"
  when: not staff_scripts_exists.stat.exists and (inventory_hostname ==  groups[group_names[0]][0])
