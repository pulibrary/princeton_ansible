---
# Installation tasks

# Determine download URL based on version selection
- name: Opkssh - set download URL for latest
  ansible.builtin.set_fact:
    opkssh_binary_url: "https://github.com/{{ opkssh_github_repo }}/releases/latest/download/opkssh-linux-{{ opkssh_cpu_arch }}"
  when: opkssh_install_version == "latest"

- name: Opkssh - set download URL for specific version
  ansible.builtin.set_fact:
    opkssh_binary_url: "https://github.com/{{ opkssh_github_repo }}/releases/download/{{ opkssh_install_version }}/opkssh-linux-{{ opkssh_cpu_arch }}"
  when: opkssh_install_version != "latest"

# Check current state
- name: Opkssh - check if binary exists
  ansible.builtin.stat:
    path: "{{ opkssh_install_dir }}/{{ opkssh_binary_name }}"
  register: opkssh_bin_stat

- name: Opkssh - get installed version (if present)
  ansible.builtin.command: "{{ opkssh_install_dir }}/{{ opkssh_binary_name }} --version"
  register: opkssh_version
  changed_when: false
  failed_when: false
  when: opkssh_bin_stat.stat.exists

# Compute whether installation is needed
- name: Opkssh - compute need_install (latest)
  ansible.builtin.set_fact:
    opkssh_need_install: "{{ not opkssh_bin_stat.stat.exists }}"
  when: opkssh_install_version == "latest"

- name: Opkssh - extract installed version (pinned)
  ansible.builtin.set_fact:
    opkssh_installed_version: >-
      {{ ((opkssh_version.stdout | default('')) | regex_findall('v?\\d+\\.\\d+\\.\\d+')
          | first | default('')) | regex_replace('^v','') }}
  when: opkssh_bin_stat.stat.exists

- name: Opkssh - normalize target version (pinned)
  ansible.builtin.set_fact:
    opkssh_target_version: "{{ opkssh_install_version | regex_replace('^v','') }}"
  when: opkssh_install_version != "latest"

- name: Opkssh - compute need_install (pinned)
  ansible.builtin.set_fact:
    opkssh_need_install: >-
      {{ (not opkssh_bin_stat.stat.exists) or
         ((opkssh_installed_version | default('')) != opkssh_target_version) }}
  when: opkssh_install_version != "latest"

# Download to a temp path only when needed
- name: Opkssh - download binary from GitHub (temp)
  ansible.builtin.get_url:
    url: "{{ opkssh_binary_url }}"
    dest: "/tmp/opkssh-linux-{{ opkssh_cpu_arch }}"
    mode: "0755"
    owner: root
    group: "{{ opkssh_auth_cmd_group }}"
    force: false
    checksum: "{{ opkssh_binary_checksum | default(omit) }}"
  when: opkssh_need_install

# Install/replace the binary atomically
- name: Opkssh - install binary
  ansible.builtin.copy:
    src: "/tmp/opkssh-linux-{{ opkssh_cpu_arch }}"
    dest: "{{ opkssh_install_dir }}/{{ opkssh_binary_name }}"
    owner: root
    group: "{{ opkssh_auth_cmd_group }}"
    mode: "0755"
    remote_src: true
    backup: false
  when: opkssh_need_install
  register: opkssh_copy_result
  notify: restart ssh

# Clean temp (only if we downloaded/replaced)
- name: Opkssh - remove temp binary
  ansible.builtin.file:
    path: "/tmp/opkssh-linux-{{ opkssh_cpu_arch }}"
    state: absent
  when: opkssh_need_install

# Refresh version fact post-install (or initial install)
- name: Opkssh - get installed version (final)
  ansible.builtin.command: "{{ opkssh_install_dir }}/{{ opkssh_binary_name }} --version"
  register: opkssh_version
  changed_when: false
  failed_when: false
