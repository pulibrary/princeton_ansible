---
# Configure SolrCloud
- name: Debug Solr variables
  ansible.builtin.debug:
    msg:
      - "solr_installation: {{ solr_installation }}"
      - "solr_bin: {{ solr_bin }}"
      - "solr_zookeeper_hosts_string: {{ solr_zookeeper_hosts_string | default('undefined') }}"
      - "solr_znode: {{ solr_znode | default('undefined') }}"
      - "solr_java_mem: {{ solr_java_mem | default('undefined') }}"
      - "solr_gc_tune: {{ solr_gc_tune | default('undefined') }}"

- name: Solrcloud | Set zookeeper connection string
  ansible.builtin.set_fact:
    solr_zookeeper_hosts_string: "{{ solr_zookeeper_hosts | join(',') }}"
  when: solr_zookeeper_hosts_string is not defined

- name: Solrcloud | Set default solr_znode value if not provided
  ansible.builtin.set_fact:
    solr_znode: "/solr9"
  when: solr_znode is not defined

- name: Solrcloud | Check for solr executable
  ansible.builtin.stat:
    path: "{{ solr_bin }}"
  register: solr_binary

- name: Solrcloud | Display solr binary status
  ansible.builtin.debug:
    var: solr_binary
  when: not solr_binary.stat.exists

- name: Solrcloud | Check for solr znode
  ansible.builtin.command: >
    {{ solr_bin }} zk ls {{ solr_znode }}
    -z {{ solr_zookeeper_hosts_string }}
  register: znode_exists_check
  changed_when: false
  ignore_errors: true

- name: Solrcloud | Check for solr znode (root level)
  ansible.builtin.command: >
    {{ solr_bin }} zk ls /
    -z {{ solr_zookeeper_hosts_string }}
  register: znode_check
  ignore_errors: true
  changed_when: false
  when: znode_exists_check is failed

- name: Solrcloud | Create zk chroot / solr znode
  ansible.builtin.command: >
    {{ solr_bin }} zk mkroot {{ solr_znode }}
    -z {{ solr_zookeeper_hosts_string }}
  register: create_znode_result
  ignore_errors: true
  changed_when: create_znode_result.rc == 0
  when:
    - znode_check is defined
    - znode_check is succeeded
    - znode_check.stdout is defined
    - solr_znode | replace('/', '') not in znode_check.stdout_lines
    - solr_znode | length > 0
    - znode_exists_check is failed

- name: Solrcloud | Evaluate znode creation result
  ansible.builtin.debug:
    msg: "ZNode creation result: {{ create_znode_result.stderr if (create_znode_result is defined and create_znode_result.stderr is defined) else 'not attempted' }}"
  when: znode_exists_check is failed

- name: Solrcloud | Configure SolrCloud init script
  ansible.builtin.template:
    src: 'solr.in.sh.j2'
    dest: '/etc/default/solr.in.sh'
    owner: '{{ solr_user }}'
    group: '{{ solr_group }}'
    mode: "0644"
  notify: Restart solr

- name: Solrcloud | Configure high ulimit value for Solr
  ansible.builtin.template:
    src: 'solr.conf.j2'
    dest: '/etc/security/limits.d/solr.conf'
    mode: "0644"
  notify: Restart solr

- name: Solrcloud | Configure SolrCloud properties
  ansible.builtin.template:
    src: 'solr.xml.j2'
    dest: '{{ solr_data_dir }}/solr.xml'
    owner: '{{ solr_user }}'
    group: '{{ solr_group }}'
    mode: "0644"
  notify: Restart solr
  when:
    - solr_cloud_download_version is version('8.0.0', '>=')

- name: Solrcloud | Configure Solr 9.x specific settings
  ansible.builtin.include_tasks: solr9_config.yml
  when: solr_cloud_download_version is version('9.0.0', '>=')

- name: Solrcloud | Configure logging
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: '{{ solr_user }}'
    group: '{{ solr_group }}'
    mode: "0644"
  loop:
    - { src: 'log4j.properties.j2', dest: '{{ solr_installation }}/server/resources/log4j.properties' }
    - { src: 'log4j2.xml.j2', dest: '{{ solr_installation }}/server/resources/log4j2.xml' }
  notify: Restart solr
