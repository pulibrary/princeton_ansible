---
# installation instructions taken from: https://lucene.apache.org/solr/guide/7_2/taking-solr-to-production.html#taking-solr-to-production
- name: Solrcloud | Check for solr service
  ansible.builtin.command: systemctl status solr
  ignore_errors: true
  changed_when: false
  register: service_solrcloud_status

- name: Solrcloud | Download SolrCloud binaries
  ansible.builtin.get_url:
    url: "{{ solr_cloud_url }}"
    dest: '/tmp/{{ solr_cloud_package }}'
    timeout: 300
    mode: "0644"
  register: solr_downloaded
  when:
    service_solrcloud_status is failed
  retries: 3
  delay: 10
  until: solr_downloaded is succeeded
  ignore_errors: true

- name: Solrcloud | copy local copy if download fails
  ansible.builtin.copy:
    src: 'local_files/solr/{{ solr_cloud_package }}'
    dest: '/tmp/{{ solr_cloud_package }}'
    mode: "0644"
  when: solr_downloaded is failed

# Debug step to check if the tar file exists
- name: Solrcloud | Check if tarball exists
  ansible.builtin.stat:
    path: "/tmp/{{ solr_cloud_package }}"
  register: tarball_stat
  when: service_solrcloud_status is failed

- name: Solrcloud | Debug tarball status
  ansible.builtin.debug:
    var: tarball_stat
  when: service_solrcloud_status is failed

- name: Solrcloud | Create extraction directory
  ansible.builtin.file:
    path: "/tmp/solr_extract"
    state: directory
    mode: "0755"
  when: service_solrcloud_status is failed

- name: Solrcloud | Extract SolrCloud tarball
  ansible.builtin.unarchive:
    src: "/tmp/{{ solr_cloud_package }}"
    dest: "/tmp/solr_extract"
    remote_src: true
  when: service_solrcloud_status is failed

- name: Solrcloud | Copy the install script from the extracted files
  ansible.builtin.copy:
    src: "/tmp/solr_extract/{{ solr_cloud_build_name }}/bin/install_solr_service.sh"
    dest: "/tmp/install_solr_service.sh"
    mode: "0755"
    remote_src: true
  when: service_solrcloud_status is failed

# Debug step to check if the script exists and has right permissions
- name: Solrcloud | Check script permissions
  ansible.builtin.stat:
    path: "/tmp/install_solr_service.sh"
  register: script_stat
  when: service_solrcloud_status is failed

- name: Solrcloud | Debug script status
  ansible.builtin.debug:
    var: script_stat
  when: service_solrcloud_status is failed

  # Use the script with bash explicitly
- name: Solrcloud | Run SolrCloud installation script
  ansible.builtin.shell: >
    bash /tmp/install_solr_service.sh /tmp/{{ solr_cloud_package }}
    -i {{ solr_installation }}
    -d {{ solr_data_dir }}
    -u {{ solr_user }}
    -s solr
    -p {{ solr_data_home }}
    -f
  args:
    creates: "{{ solr_installation }}/bin/solr"
  when: service_solrcloud_status is failed

- name: Solrcloud | Cleanup installation files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/{{ solr_cloud_package }}"
    - "/tmp/solr_extract"
    - "/tmp/install_solr_service.sh"
  when: service_solrcloud_status is failed
