---
# Main task file for SolrCloud role

- name: Solrcloud | Set Solr version variables
  ansible.builtin.set_fact:
    is_solr9: "{{ true if solr_cloud_download_version is version('9.0.0', '>=') else false }}"
  tags: [always]

- name: Solrcloud | Display Solr version info
  ansible.builtin.debug:
    msg: "Configuring Solr {{ 'version 9.x' if is_solr9 else 'version 8.x' }} ({{ solr_cloud_download_version }})"
  tags: [always]

# Install dependencies
- name: Solrcloud | Install dependencies
  ansible.builtin.apt:
    name:
      - cifs-utils
      - lsof
      - acl
    state: present
  tags: [packages]

# Ensure users and groups exist
- name: Solrcloud | Ensure Solr group exists
  ansible.builtin.group:
    name: "{{ solr_group }}"
    state: present
  tags: [users]

- name: Solrcloud | Ensure Solr user exists
  ansible.builtin.user:
    name: "{{ solr_user }}"
    group: "{{ solr_group }}"
    system: true
    createhome: true
    home: "/home/{{ solr_user }}"
    shell: /bin/bash
  tags: [users]

# Create required directories
- name: Solrcloud | Create Solr directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  loop:
    - "{{ solr_data_home }}"         # /solr
    - "{{ solr_data_dir }}"          # /solr/data
    - "{{ solr_log_dir }}"           # /solr/logs
    - "{{ solr_pid_dir }}"           # /run/solr
    - "/mnt/solr_backup"             # For backups
  tags: [directories]

# Download SolrCloud package
- name: Solrcloud | Download SolrCloud archive
  ansible.builtin.get_url:
    url: "{{ solr_cloud_url }}"
    dest: "/tmp/{{ solr_cloud_package }}"
    timeout: 300
    mode: "0644"
  register: solr_downloaded
  retries: 3
  delay: 10
  until: solr_downloaded is succeeded
  ignore_errors: true
  tags: [download]

# Fallback to local copy if download fails
- name: Solrcloud | Copy local archive if download fails
  ansible.builtin.copy:
    src: "local_files/solr/{{ solr_cloud_package }}"
    dest: "/tmp/{{ solr_cloud_package }}"
    mode: "0644"
  when: solr_downloaded is failed
  tags: [download]

# Create extraction directory
- name: Solrcloud | Create extraction directory
  ansible.builtin.file:
    path: "/tmp/solr_extract"
    state: directory
    mode: "0755"
  tags: [install]

# Extract archive
- name: Solrcloud | Extract SolrCloud archive
  ansible.builtin.unarchive:
    src: "/tmp/{{ solr_cloud_package }}"
    dest: "/tmp/solr_extract"
    remote_src: true
  tags: [install]

# Make sure installation directories exist
- name: Solrcloud | Create installation directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  loop:
    - "{{ solr_install_dir }}"
    - "{{ solr_versioned_dir }}"
  tags: [install]

# Direct copy of files
- name: Solrcloud | Copy Solr files
  ansible.builtin.copy:
    src: "/tmp/solr_extract/{{ solr_cloud_build_name }}/"
    dest: "{{ solr_versioned_dir }}/"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    remote_src: true
    mode: preserve
  tags: [install]

# Create symlink
- name: Solrcloud | Create symlink
  ansible.builtin.file:
    src: "{{ solr_versioned_dir }}"
    dest: "{{ solr_installation }}"
    state: link
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
  tags: [install]

# Make sure binary is executable
- name: Solrcloud | Ensure Solr binary is executable
  ansible.builtin.file:
    path: "{{ solr_installation }}/bin/solr"
    mode: "0755"
    state: file
  tags: [install]

# Create systemd service file
- name: Solrcloud | Configure Solr systemd service
  ansible.builtin.template:
    src: solr.service.j2
    dest: /etc/systemd/system/solr.service
    mode: "0644"
  notify: Reload systemd and restart solr
  tags: [service]

# Configure SolrCloud environment
- name: Solrcloud | Configure SolrCloud init script
  ansible.builtin.template:
    src: solr.in.sh.j2
    dest: /etc/default/solr.in.sh
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: "0644"
  notify: Restart solr
  tags: [configure]

# Configure system limits
- name: Solrcloud | Configure high ulimit value for Solr
  ansible.builtin.template:
    src: solr.conf.j2
    dest: /etc/security/limits.d/solr.conf
    mode: "0644"
  notify: Restart solr
  tags: [system]

# Configure Solr XML
- name: Solrcloud | Configure SolrCloud properties
  ansible.builtin.template:
    src: solr.xml.j2
    dest: "{{ solr_data_dir }}/solr.xml"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: "0644"
  notify: Restart solr
  tags: [configure]

# Configure logging
- name: Solrcloud | Configure logging
  ansible.builtin.template:
    src: log4j2.xml.j2
    dest: "{{ solr_data_home }}/log4j2.xml"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: "0644"
  notify: Restart solr
  tags: [logging]

# Version-specific configuration
- name: Solrcloud | Configure Solr 9.x specific settings
  ansible.builtin.include_tasks: solr9_config.yml
  when: is_solr9
  tags: [configure]

- name: Solrcloud | Configure Solr 8.x specific settings
  ansible.builtin.include_tasks: solr8_config.yml
  when: not is_solr9
  tags: [configure]

# Clean up installation files
- name: Solrcloud | Cleanup installation files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/{{ solr_cloud_package }}"
    - "/tmp/solr_extract"
  tags: [cleanup]

# Start and enable Solr service
- name: Solrcloud | Start and enable Solr service
  ansible.builtin.systemd:
    name: solr
    state: started
    enabled: true
    daemon_reload: true
  tags: [service]
