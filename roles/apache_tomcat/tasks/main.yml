---
# tasks file for roles/apache_tomcat
- name: apache_tomcat | check if tomcat is already installed
  stat:
    path: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
  register: is_installed

- name: apache_tomcat | create group {{ tomcat_group }}
  group:
    name: "{{ tomcat_group }}"
    gid: "{{ tomcat_group_gid | default(omit) }}"
    state: present

- name: apache_tomcat | create a user {{ tomcat_user }}
  user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    uid: "{{ tomcat_user_uid | default(omit) }}"
    state: present

- name: apache_tomcat | download apache-tomcat-{{ tomcat_version }}.tar.gz
  get_url:
    url: "{{ tomcat_downloadurl }}/tomcat/tomcat-{{ tomcat_version.split('.')[0] }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: /tmp
    timeout: 120
  when: not is_installed.stat.exists

- name: apache_tomcat | Unarchive apache-tomcat-{{ tomcat_version }}.tar.gz at {{ tomcat_install_path }}
  unarchive:
    src: "{{ tomcat_temp_download_path }}/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: "{{ tomcat_install_path }}"
    remote_src: true
    owner: "{% if tomcat_permissions_production %}root{% else %}{{ tomcat_user }}{% endif %}"
    group: "{{ tomcat_group }}"
    creates: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
  register: tomcat_installed
  when: not is_installed.stat.exists

- name: apache_tomcat | setup server.xml
  template:
    src: "{{ tomcat_template_server }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/server.xml"
  notify: restart tomcat

- name: apache_tomcat | user roles to be enabled
  set_fact:
    tomcat_user_roles: "{{ (tomcat_user_roles + item.roles.split(',')|list)|unique }}"
  with_items:
    - "{{ tomcat_users }}"

- name: apache_tomcat | setup tomcat-users.xml
  template:
    src: "{{ tomcat_template_users }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/tomcat-users.xml"
  notify: restart tomcat

- name: apache_tomcat | create symlink {{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }} to {{ tomcat_install_path }}/{{ tomcat_service_name }}
  file:
    src: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
    dest: "{{ tomcat_install_path }}/{{ tomcat_service_name }}"
    state: link

- name: apache_tomcat | set up permissions
  include: set-production-permissions.yml

- name: apache_tomcat | create systemd directory
  file:
    path: "/usr/lib/systemd/system"
    state: directory
  when: running_on_server

- name: apache_tomcat | configure service file {{ tomcat_service_name }}.service
  template:
    src: "{{ tomcat_template_systemd_service }}"
    dest: "/usr/lib/systemd/system/{{ tomcat_service_name }}.service"
  when: running_on_server
  notify: restart tomcat

- name: apache_tomcat | enable service on startup
  systemd:
    name: "{{ tomcat_service_name }}"
    enabled: "{% if tomcat_service_enabled_on_startup %}yes{% else %}no{% endif %}"
    daemon_reload: true
  when: running_on_server
