---
- name: PostgreSQL | Make sure the CA certificates are available
  apt:
    pkg: ca-certificates
    state: present

- name: PostgreSQL | Add PostgreSQL repository apt-key
  shell: >
      set -o pipefail |
      wget --quiet -O - {{ postgresql_apt_key_url }} | sudo apt-key add -
  changed_when: false

- name: add postgresql repository
  apt_repository:
    repo: 'deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main'
    update_cache: 'yes'
    state: present

- name: install postgresql server packages
  apt:
    name: '{{ item }}'
    state: present
    cache_valid_time: '{{ apt_cache_timeout }}'
    update_cache: 'yes'
  loop:
    - postgresql-{{ postgres_version }}
  when: postgresql_is_local

- name: install postgresql client packages
  apt:
    name: '{{ item }}'
    state: present
    cache_valid_time: '{{ apt_cache_timeout }}'
    update_cache: 'yes'
  loop:
    - libpq-dev
    - python-psycopg2

- name: install access rules
  copy:
    src: pg_hba.conf
    dest: /etc/postgresql/{{ postgres_version }}/main/pg_hba.conf
    group: postgres
    owner: postgres
  register: configure_postgres
  when: postgresql_is_local

- name: install configuration file
  template:
    src: 'postgresql.conf.j2'
    dest: '/etc/postgresql/{{ postgres_version }}/main/postgresql.conf'
    group: postgres
    owner: postgres
  register: configure_postgres
  when: postgresql_is_local

- name: ensure postgres starts on boot
  service:
    name: postgresql
    enabled: 'yes'
  when: postgresql_is_local

- name: restart postgres server
  service:
    name: postgresql
    state: started
  when: postgresql_is_local

- name: ensure access to postgres server
  lineinfile:
    path: '/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf'
    line: 'host    all             all             {{ ansible_default_ipv4.address }}/32       md5'
  delegate_to: '{{ postgres_host }}'
  register: remote_postgres_configured
  when:
    - postgres_host is not none
    - not postgresql_is_local
    - running_on_server

- name: reload remote postgres now for the access to take place
  service:
    name: postgresql
    state: reloaded
  become: yes
  delegate_to: '{{ db_host }}'
  when:
    - running_on_server
    - remote_postgres_configured


- include: create_users.yml
- include: create_db.yml
