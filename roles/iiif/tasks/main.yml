---
# tasks file for iiif
- name: iiif | create a working directory for serverless
  ansible.builtin.file:
    path: "{{ serverless_path }}"
    state: directory
    mode: 0755

- name: iiif | install sam and awscli
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - awscli
    - aws-sam-cli  # will this get the tap'ed repo

- name: iiif | add clone repo
  ansible.builtin.git:
    repo: "https://github.com/pulibrary/serverless-iiif.git"
    dest: "{{ serverless_path }}/serverless-iiif"
    force: true

- name: iiif | ensure existence of S3 bucket
  amazon.aws.aws_s3:
    aws_access_key: "{{ project_user_aws_access_key }}"
    aws_secret_key: "{{ project_user_aws_secret_key }}"
    region: "{{ aws_region }}"
    bucket: "{{ item }}"
    mode: create
  loop:
    - "puliiif-{{ runtime_env | default('staging') }}"
    - "puliiif-{{ runtime_env | default('staging') }}-cache"

- name: iiif | copy deploy script
  ansible.builtin.template:
    src: ans_deploy.sh.j2
    dest: "{{ lambda_dir }}/ans_deploy.sh"
    mode: 0755

- name: iiif | build container
  ansible.builtin.command: sam build --use-container
  environment: 
    AWS_REGION: "{{ aws_region }}"
    AWS_ACCESS_KEY_ID: "{{ project_user_aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ project_user_aws_secret_key }}"
  args:
    chdir: "{{ lambda_dir }}"
  changed_when: false

- name: iiif | deploy lambda
  ansible.builtin.command: ans_deploy.sh "{{ runtime_env | default('staging') }}"
  environment: 
    AWS_REGION: "{{ aws_region }}"
    AWS_ACCESS_KEY_ID: "{{ project_user_aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ project_user_aws_secret_key }}"
  args:
    chdir: "{{ lambda_dir }}"
  changed_when: false
  ignore_errors: true
