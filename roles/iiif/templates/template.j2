Transform: "AWS::Serverless-2016-10-31"
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-iiif
    Description: IIIF Image API 2.1 server in an AWS Serverless Application
    Author: Samvera
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ["iiif", "image-processing"]
    HomePageUrl: https://github.com/samvera-labs/serverless-iiif
    SemanticVersion: 3.1.2
    SourceCodeUrl: https://github.com/samvera-labs/serverless-iiif
Parameters:
  UseCacheBucket:
    Type: String
    Description: Use an S3 Bucket to store responses > 6MB
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  UseCloudFront:
    Type: String
    Description: Use a CloudFront distribution for caching and returning responses > 6MB (required if UseCacheBucket = true)
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  CacheMinimumTTL:
    Type: Number
    Description: Minimum TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CacheMaximumTTL:
    Type: Number
    Description: Maximum TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CacheDefaultTTL:
    Type: Number
    Description: Default TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CachePriceClass:
    Type: String
    Description: Price Class for the CloudFront Cache
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  CacheDomainName:
    Type: String
    Description: Custom Domain Name for the API Gateway Endpoint or CloudFront Cache
    Default: ""
  CacheSSLCertificate:
    Type: String
    Description: ARN of the ACM SSL Certification to use for the API Gateway Endpoint or CloudFront Cache
    Default: ""
  PixelDensity:
    Type: Number
    Description: Hardcoded DPI/Pixel Density/Resolution to encode in output images
    Default: 0
    MinValue: 0
  SourceBucket:
    Type: String
    Description: Name of bucket containing source images
  StageName:
    Type: String
    Description: Name of the API stage to be deployed
    Default: latest
  IiifLambdaMemory:
    Type: Number
    Description: Memory setting for the lambda.
    Default: 3008
  IiifLambdaTimeout:
    Type: Number
    Description: The timeout for the lambda.
    Default: 30
  OriginRequestARN:
    Type: String
    Description: ARN of the Lambda@Edge Function to use at the origin-request stage
    Default: ""
  OriginResponseARN:
    Type: String
    Description: ARN of the Lambda@Edge Function to use at the origin-response stage
    Default: ""
  ViewerRequestARN:
    Type: String
    Description: ARN of the CloudFront or Lambda@Edge Function to use at the viewer-request stage
    Default: ""
  ViewerRequestType:
    Type: String
    Description: Type of viewer-request Function to use (CloudWatch Function or Lambda@Edge)
    Default: "None"
    AllowedValues:
      - CloudWatch Function
      - Lambda@Edge
      - None
  ViewerResponseARN:
    Type: String
    Description: ARN of the CloudFront or Lambda@Edge Function to use at the viewer-response stage
    Default: ""
  ViewerResponseType:
    Type: String
    Description: Type of viewer-response Function to use (CloudWatch Function or Lambda@Edge)
    Default: "None"
    AllowedValues:
      - CloudWatch Function
      - Lambda@Edge
      - None
Conditions:
  CreateCacheBucket: 
    Fn::Equals: [!Ref UseCacheBucket, "true"]
  CreateDistribution: 
    Fn::Or:
      - Fn::Equals: [!Ref UseCloudFront, "true"]
      - Fn::Equals: [!Ref UseCacheBucket, "true"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestARN, ""]
  CreateCacheBucketAndDistribution:
    Fn::And:
      - Condition: CreateCacheBucket
      - Condition: CreateDistribution
  DistributionCustomDomain:
    Fn::And:
      - Condition: CreateDistribution
      - Fn::Not:
          - Fn::Equals: [!Ref CacheDomainName, ""]
  UseOriginRequest:
    Fn::Not:
      - Fn::Equals: [!Ref OriginRequestARN, ""]
  UseOriginResponse:
    Fn::Not:
      - Fn::Equals: [!Ref OriginResponseARN, ""]
  UseViewerRequest:
    Fn::And:
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestType, "None"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestARN, ""]
  UseViewerResponse:
    Fn::And:
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerResponseType, "None"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerResponseARN, ""]
  ViewerRequestCloudWatchFunction:
    Fn::And:
      - Condition: UseViewerRequest
      - Fn::Equals: [!Ref ViewerRequestType, "CloudWatch Function"]
  ViewerRequestLambda:
    Fn::And:
      - Condition: UseViewerRequest
      - Fn::Equals: [!Ref ViewerRequestType, "Lambda@Edge"]
  ViewerResponseCloudWatchFunction:
    Fn::And:
      - Condition: UseViewerResponse
      - Fn::Equals: [!Ref ViewerResponseType, "CloudWatch Function"]
  ViewerResponseLambda:
    Fn::And:
      - Condition: UseViewerResponse
      - Fn::Equals: [!Ref ViewerResponseType, "Lambda@Edge"]
  UsePixelDensity:
    Fn::Not:
      - Fn::Equals: [!Ref PixelDensity, 0]
Resources:
  Dependencies:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      LayerName:
        Fn::Sub: "${AWS::StackName}-dependencies"
      Description: Dependencies for IIIF app
      ContentUri: ./dependencies
      CompatibleRuntimes:
        - nodejs14.x
      LicenseInfo: "Apache-2.0"
    Metadata:
      BuildMethod: nodejs14.x
  LambdaEdgeFunctionForwardedFor:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ./src_edge
        Role: !GetAtt LambdaEdgeFunctionRole.Arn
        Runtime: nodejs12.x
        Handler: index.viewerRequest
        Timeout: 5
        AutoPublishAlias: live 
  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action: 
                - "sts:AssumeRole"
              Principal:
                Service: 
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"
  IiifCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CacheDomainName
      ValidationMethod: 'DNS'
  CacheBucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateCacheBucket
    Properties:
      BucketName: 
        Fn::Sub: "${AWS::StackName}-cache"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1
  CacheBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Condition: CreateCacheBucketAndDistribution
    Properties:
      Bucket: !Ref CacheBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - Fn::Sub: "arn:aws:s3:::${CacheBucket}/*"
            Principal:
              CanonicalUser:
                Fn::GetAtt: CachingIdentity.S3CanonicalUserId
  IiifFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs14.x
      Handler: index.handler
      MemorySize: !Ref IiifLambdaMemory
      Timeout:
        Ref: IiifLambdaTimeout
      CodeUri: ./src
      Layers:
        - Ref: Dependencies
        - 'arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node12-x:22'
      Policies:
        - AWSLambdaExecute
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Resource:
                - Fn::Sub: "arn:aws:s3:::${SourceBucket}"
                - Fn::Sub: "arn:aws:s3:::${CacheBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectACL
              Resource:
                - Fn::Sub: "arn:aws:s3:::${SourceBucket}/*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - Fn::Sub: "arn:aws:s3:::${CacheBucket}/*"
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: "*"
      Environment:
        Variables:
          cacheBucket:
            Fn::If: 
              - CreateCacheBucket
              - Fn::Sub: "${AWS::StackName}-cache"
              - !Ref AWS::NoValue
          density:
            Fn::If:
              - UsePixelDensity
              - !Ref PixelDensity
              - !Ref AWS::NoValue
          forceHost:
            Fn::If:
              - DistributionCustomDomain
              - !Ref CacheDomainName
              - !Ref AWS::NoValue
          includeStage:
            Fn::If:
              - CreateDistribution
              - false
              - !Ref AWS::NoValue
          preflight:
            Fn::If:
              - UseViewerRequest
              - true
              - !Ref AWS::NoValue
          tiffBucket:
            Fn::Sub: "${SourceBucket}"
          DD_KMS_API_KEY: "AQICAHjNoNXrp3Thd1UL3np+Y/XCnSL7Qz4WnjX94YIt8xU8swEtnSpn/igd3vmQIASzwzbxAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMRJdyqtfH+l/fCVhMAgEQgDOC6XkoNRyTuE/i4ICJWXqlWwowFpcU5IGyAlReULvVErzUfu1TM9MiaKYGo2vhSbGNjKI="
          DD_FLUSH_TO_LOG: True
      Events:
        GetId:
          Type: Api
          Properties:
            Path: /iiif/2/{id}
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsId:
          Type: Api
          Properties:
            Path: /iiif/2/{id}
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
        GetInfoJson:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/info.json
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsInfoJson:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/info.json
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
        GetImage:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/{proxy+}
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsImage:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/{proxy+}
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
  IiifApi:
    Type: "AWS::Serverless::Api"
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}-api"
      StageName:
        Fn::Sub: "${StageName}"
      EndpointConfiguration: "REGIONAL"
      Cors:
        AllowMethods: "'GET'"
        AllowOrigin: "'*'"
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "execute-api:/*/*/*"
              Condition:
                StringEquals:
                  aws:UserAgent: "Amazon CloudFront"
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2018-12-14T18:28:00Z"
        schemes:
          - "http"
          - "https"
        paths:
          /iiif/2/{id}:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /iiif/2/{id}/info.json:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Set-Cookie:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /iiif/2/{id}/{proxy+}:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Set-Cookie:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    contentHandling: "CONVERT_TO_BINARY"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "frz8df"
                cacheKeyParameters:
                  - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "frz8df"
                cacheKeyParameters:
                  - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-binary-media-types:
          - "*/*"
  CachingIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Condition: CreateDistribution
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Caching Distribution Identity"
  CFDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: CreateDistribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: 'http2'
        CustomErrorResponses:
          - ErrorCode: 502
            ErrorCachingMinTTL: 1
          - ErrorCode: 503
            ErrorCachingMinTTL: 1
        Aliases:
          Fn::If:
            - DistributionCustomDomain
            - - !Ref CacheDomainName
            - !Ref AWS::NoValue
        ViewerCertificate:
          Fn::If:
            - DistributionCustomDomain
            - AcmCertificateArn: !Ref IiifCertificate
              MinimumProtocolVersion: 'TLSv1'
              SslSupportMethod: 'sni-only'
            - CloudFrontDefaultCertificate: true
        Origins:
          - Id: IiifApi
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            DomainName:
              Fn::Sub: "${IiifApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath:
              Fn::Sub: "/${IiifApi.Stage}"
          - Fn::If:
              - CreateCacheBucket
              - Id: IiifCache
                S3OriginConfig:
                  OriginAccessIdentity: 
                    Fn::Join:
                      - ''
                      - - 'origin-access-identity/cloudfront/'
                        - !Ref CachingIdentity
                DomainName:
                  Fn::Sub: "${CacheBucket}.s3.${AWS::Region}.amazonaws.com"
              - !Ref AWS::NoValue
        OriginGroups:
          Quantity: 
            Fn::If: [CreateCacheBucket, 1, 0]
          Items:
            Fn::If:
              - CreateCacheBucket
              - - Id: IiifOrigins
                  Members:
                    Quantity: 2
                    Items:
                      - OriginId: IiifApi
                      - OriginId: IiifCache
                  FailoverCriteria:
                      StatusCodes:
                          Items: [404]
                          Quantity: 1
              - []
        DefaultCacheBehavior:
          TargetOriginId: 
            Fn::If: [CreateCacheBucket, IiifOrigins, IiifApi]
          ViewerProtocolPolicy: https-only
          AllowedMethods: ["GET", "HEAD", "OPTIONS"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
          MinTTL: !Ref CacheMinimumTTL
          MaxTTL: !Ref CacheMaximumTTL
          DefaultTTL: !Ref CacheDefaultTTL
          FunctionAssociations:
            - Fn::If:
              - ViewerRequestCloudWatchFunction
              - EventType: viewer-request
                FunctionARN: !Ref ViewerRequestARN
              - !Ref AWS::NoValue
            - Fn::If:
              - ViewerResponseCloudWatchFunction
              - EventType: viewer-response
                FunctionARN: !Ref ViewerResponseARN
              - !Ref AWS::NoValue
          LambdaFunctionAssociations:
            - Fn::If:
              - ViewerRequestLambda
              - EventType: viewer-request
                LambdaFunctionARN: !Ref ViewerRequestARN
                IncludeBody: false
              - EventType: viewer-request
                LambdaFunctionARN: !Ref LambdaEdgeFunctionForwardedFor.Version
            - Fn::If:
              - UseOriginRequest
              - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestARN
                IncludeBody: false
              - !Ref AWS::NoValue
            - Fn::If:
              - UseOriginResponse
              - EventType: origin-response
                LambdaFunctionARN: !Ref OriginResponseARN
                IncludeBody: false
              - !Ref AWS::NoValue
            - Fn::If:
              - ViewerResponseLambda
              - EventType: viewer-response
                LambdaFunctionARN: !Ref ViewerResponseARN
                IncludeBody: false
              - !Ref AWS::NoValue
Outputs:
  Endpoint:
    Description: IIIF Endpoint URL
    Value:
      Fn::If:
        - CreateDistribution
        - Fn::If:
          - DistributionCustomDomain
          - Fn::Sub: "https://${CacheDomainName}/iiif/2/"
          - Fn::Sub: "https://${CFDistribution.DomainName}/iiif/2/"
        - Fn::Sub: "https://${IiifApi}.execute-api.${AWS::Region}.amazonaws.com/${IiifApi.Stage}/iiif/2/"
  ApiId:
    Description: API Gateway ID
    Value:
      Ref: IiifApi
    Export:
      Name: !Sub "${AWS::StackName}:ApiId"
  DistributionId:
    Description: Caching Distribution ID
    Value: 
      Fn::If:
        - CreateDistribution
        - !Ref CFDistribution
        - AWS::NoValue
    Export:
      Name: !Sub "${AWS::StackName}:DistributionId"
  LambdaFunction:
    Description: IIIF Lambda Function Name
    Value: !Ref IiifFunction
