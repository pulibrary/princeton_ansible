---
- name: Setup | Upload NGINX Main Configuration File
  ansible.builtin.copy:
    src: "{{ nginx_main_upload_src }}"
    dest: "{{ nginx_main_upload_dest }}"
    mode: 0755
    backup: true
  notify: Reload NGINX
  when: nginx_main_upload_enable

- name: Setup | Ensure NGINX HTTP Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_http_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_http_upload_enable

- name: Setup | Ensure NGINX partial config "template" Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_template_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_template_upload_enable

- name: Setup | Make a backup of nginx config files dir
  ansible.builtin.copy:
    src: "{{ nginx_http_upload_dest }}"
    dest: "{{ config_backup_dir }}"
    mode: 0755
    remote_src: true
  tags: test_template

- name: Setup | Upload NGINX HTTP Static Site Config Files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_http_upload_dest }}"
    mode: 0755
  with_fileglob: "{{ nginx_http_upload_src }}"
  notify: Reload NGINX
  when: nginx_http_upload_enable
  register: uploaded_static_files
  tags:
    - update_conf
    - test_template

# identify and remove obsolete static files
- name: Setup | list files in static config dir
  ansible.builtin.find:
    paths: "{{ nginx_http_upload_dest }}/"
    recurse: false
    file_type: file
  register: all_static_files
  tags: test_template

- name: Setup | set facts for removing obsolete static config files
  set_fact:
    static_files_on_server: "{{ all_static_files.files|map(attribute='path') }}"
    static_files_we_want: "{{ uploaded_static_files.results|map(attribute='dest') }}"
  tags: test_template

- name: Debug - view static files on server
  ansible.builtin.debug:
    var: static_files_on_server
  tags: test_template

- name: Debug - view static files we want
  ansible.builtin.debug:
    var: static_files_we_want
  tags: test_template

- name: Find obsolete static files
  # ITEMS IN static_files_on_server NOT IN static_files_we_want
  set_fact: obsolete_static_files="{{ static_files_on_server | difference(static_files_we_want) }}"
  tags: test_template

- name: Debug - view obsolete static files
  ansible.builtin.debug:
    var: obsolete_static_files
  tags: test_template

- name: Delete obsolete static files
  # will remove static files as we migrate sites to dynamic config
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ obsolete_static_files }}"
  tags: test_template

- name: Setup | Ensure cache directories exist
  ansible.builtin.file:
    path: /tmp/nginx/{{ item.short_name }}/NGINX_cache
    state: directory
    mode: 0755
  notify: Reload NGINX
  loop: "{{ sites }}"

- name: Setup | Upload NGINX partial config "template" files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_template_upload_dest }}"
    mode: 0755
    backup: true
  with_fileglob: "{{ nginx_template_upload_src }}"
  notify: Reload NGINX
  when: nginx_template_upload_enable
  tags: update_conf

- name: Setup | Ensure NGINX HTTP Dynamic Site Config Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_http_dynamic_config_dest }}"
    state: directory
    mode: 0755
  when: nginx_template_upload_enable
  tags: test_template

- name: Setup | Upload NGINX HTTP Dynamic Site Config Files
  ansible.builtin.template:
    src: http/library.conf.j2
    dest: "{{ nginx_http_dynamic_config_dest }}/{{ item.name }}.conf"
    mode: 0755
  when: nginx_http_upload_enable
  loop: "{{ sites }}"
  tags:
    - update_conf
    - test_template
  register: uploaded_dynamic_files

- name: Setup | list files in dynamic config dir
  ansible.builtin.find:
    paths: "{{ nginx_http_dynamic_config_dest }}/"
    recurse: false
    file_type: file
  register: all_dynamic_files
  tags: test_template

- name: Setup | set facts for removing obsolete dynamic config files
  set_fact:
    dynamic_files_on_server: "{{ all_dynamic_files.files|map(attribute='path') }}"
    dynamic_files_we_want: "{{ uploaded_dynamic_files.results|map(attribute='dest') }}"
  tags: test_template

- name: Debug - view files on server
  ansible.builtin.debug:
    var: dynamic_files_on_server
  tags: test_template

- name: Debug - view sites we want
  ansible.builtin.debug:
    var: dynamic_files_we_want
  tags: test_template

- name: Find obsolete dynamic config files
  # ITEMS in files on server NOT in sites we want
  set_fact: obsolete_dynamic_files="{{ dynamic_files_on_server | difference(dynamic_files_we_want) }}"
  tags: test_template

- name: Debug - view obsolete dynamic config files
  ansible.builtin.debug:
    var: obsolete_dynamic_files
  tags: test_template

- name: Delete obsolete dynamic config files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ obsolete_dynamic_files }}"
  tags: test_template

- name: Setup | Ensure NGINX HTML Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_html_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_html_upload_enable
  tags: update_conf

- name: Setup | Upload NGINX HTML Files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_html_upload_dest }}"
    mode: 0755
    backup: true
  with_fileglob: "{{ nginx_html_upload_src }}"
  notify: Reload NGINX
  when: nginx_html_upload_enable
  tags: update_conf

- name: Setup | Ensure SSL Certificate Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_ssl_crt_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_ssl_upload_enable

- name: Setup | Ensure SSL Key Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_ssl_key_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_ssl_upload_enable
  tags: SSL

- name: Setup | Upload NGINX SSL Certificates
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_ssl_crt_upload_dest }}"
    mode: 0640
    decrypt: true
    backup: true
  with_fileglob: "{{ nginx_ssl_crt_upload_src }}"
  when: nginx_ssl_upload_enable
  tags: SSL

- name: Setup | All NGINX | Upload NGINX SSL Keys
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_ssl_key_upload_dest }}"
    mode: 0640
    decrypt: true
    backup: true
  with_fileglob: "{{ nginx_ssl_key_upload_src }}"
  when: nginx_ssl_upload_enable
  tags: SSL
