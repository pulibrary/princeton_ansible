---
- name: Setup | Upload NGINX Main Configuration File
  ansible.builtin.copy:
    src: "{{ nginx_main_upload_src }}"
    dest: "{{ nginx_main_upload_dest }}"
    mode: 0755
    backup: true
  notify: Reload NGINX
  when: nginx_main_upload_enable

- name: Setup | Ensure NGINX HTTP Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_http_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_http_upload_enable

- name: Setup | Ensure NGINX partial config "template" Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_template_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_template_upload_enable

- name: Setup | Upload NGINX HTTP Static Site Config Files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_http_upload_dest }}"
    mode: 0755
    backup: true
  with_fileglob: "{{ nginx_http_upload_src }}"
  notify: Reload NGINX
  when: nginx_http_upload_enable
  tags: update_conf

- name: Setup | Ensure cache directories exist
  ansible.builtin.file:
    path: /tmp/nginx/{{ item.short_name }}/NGINX_cache
    state: directory
    mode: 0755
  notify: Reload NGINX
  loop: "{{ sites }}"

- name: Setup | Upload NGINX partial config "template" files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_template_upload_dest }}"
    mode: 0755
    backup: true
  with_fileglob: "{{ nginx_template_upload_src }}"
  notify: Reload NGINX
  when: nginx_template_upload_enable
  tags: update_conf

- name: Setup | Ensure NGINX HTTP Dynamic Site Config Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_http_dynamic_config_dest }}"
    state: directory
    mode: 0755
  when: nginx_template_upload_enable
  tags: test_template


- name: Setup | Upload NGINX HTTP Dynamic Site Config Files
  ansible.builtin.template:
    src: http/library.conf.j2
    dest: "{{ nginx_http_dynamic_config_dest }}/{{ item.name }}.conf"
    # dest: /tmp/{{ item.name }}.conf
    # dest: /etc/nginx/conf.d/{{ item.name }}.conf
    mode: 0755
    backup: true
  when: nginx_http_upload_enable
  loop: "{{ sites }}"
  tags:
    - update_conf
    - test_template
  register: sites_loop

- name: what is in sites list?
  ansible.builtin.debug:
    var: sites_loop
  tags: test_template

- name: Get list of all files
  ansible.builtin.find:
    paths: "{{ nginx_http_dynamic_config_dest }}/"
    recurse: false
    file_type: file
  register: all_files
  tags: test_template

- name: what is in all files?
  ansible.builtin.debug:
    var: all_files
  tags: test_template

- name: Find files on server that do not exist in sites
  set_fact: files_diff="{{ all_files | difference(sites_loop) }}"
  tags: test_template

- name: what is in files diff?
  ansible.builtin.debug:
    var: files_diff
  tags: test_template

- name: Setup | Ensure NGINX HTML Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_html_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_html_upload_enable
  tags: update_conf

- name: Setup | Upload NGINX HTML Files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_html_upload_dest }}"
    mode: 0755
    backup: true
  with_fileglob: "{{ nginx_html_upload_src }}"
  notify: Reload NGINX
  when: nginx_html_upload_enable
  tags: update_conf

- name: Setup | Ensure SSL Certificate Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_ssl_crt_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_ssl_upload_enable

- name: Setup | Ensure SSL Key Directory Exists
  ansible.builtin.file:
    path: "{{ nginx_ssl_key_upload_dest }}"
    state: directory
    mode: 0755
  when: nginx_ssl_upload_enable
  tags: SSL

- name: Setup | Upload NGINX SSL Certificates
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_ssl_crt_upload_dest }}"
    mode: 0640
    decrypt: true
    backup: true
  with_fileglob: "{{ nginx_ssl_crt_upload_src }}"
  when: nginx_ssl_upload_enable
  tags: SSL

- name: Setup | All NGINX | Upload NGINX SSL Keys
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nginx_ssl_key_upload_dest }}"
    mode: 0640
    decrypt: true
    backup: true
  with_fileglob: "{{ nginx_ssl_key_upload_src }}"
  when: nginx_ssl_upload_enable
  tags: SSL
