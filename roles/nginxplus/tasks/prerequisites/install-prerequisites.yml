---
- name: "Install Required Ubuntu Dependencies"
  apt:
    name:
      - apt-transport-https
      - dirmngr
      - fail2ban

- name: ensure ufw does not block anything
  community.general.ufw:
    state: enabled
    policy: allow

# Note: the following IP address is "reserved for special use",
# we expect to never receive any traffic from it, so it is safe
# to block indefinitely as an example
- name: add an intial ufw rule that blocks a sample ip
  community.general.ufw:
    rule: reject
    from_ip: "192.0.2.0"

- name: identify unwanted configuration files that we should delete
  ansible.builtin.find:
    paths: /etc/fail2ban/jail.d
    file_type: file
    excludes: 
      - "nginx-limit-req.conf"
      - "nginx-badbots.conf"
  register: unwanted_fail2ban_files

- name: Delete unwanted configuration files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ unwanted_fail2ban_files['files'] }}"

- name: Add nginx-badbots filter
  ansible.builtin.copy:
    src: "fail2ban/nginx-badbots-filter.conf"
    dest: "/etc/fail2ban/filter.d/nginx-badbots.conf"
    owner: root
    group: root
    mode: 0644

- name: Add nginx-badbots restriction
  ansible.builtin.copy:
    src: "fail2ban/nginx-badbots-restriction.conf"
    dest: "/etc/fail2ban/jail.d/nginx-badbots.conf"
    owner: root
    group: root
    mode: 0644

- name: Add nginx-limit-req fail2ban configuration
  ansible.builtin.copy:
    src: "fail2ban/nginx-limit-req.conf"
    dest: "/etc/fail2ban/jail.d/nginx-limit-req.conf"
    owner: root
    group: root
    mode: 0644

- name: start and enable fail2ban
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: true
  notify: restart fail2ban
